# Change colnames
names(algorithmData) <- tolower(names(algorithmData))
names(algorithmData) <- sub("chromosome", "chr", names(algorithmData))
names(algorithmData) <- sub("cnv.type", "type", names(algorithmData))
# Select columns
colNames <- c("chr", "start", "end", "sample","type")
algorithmData <- algorithmData[, colNames]
# Eliminate X in sample name
algorithmData$sample <- as.character(algorithmData$sample)
algorithmData$sample <- sub("X", "", algorithmData$sample)
# Run of sample and check for FP, FN, TP and TN
samples <- unique(algorithmData$sample)
for (sample in samples){
# filter cnvfounds by sample
s <- which(algorithmData$sample == sample)
sampleData <- algorithmData[s, ]
sampleFile <- file.path(tempDir, "sample.bed")
write.table(sampleData, sampleFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Make positive roi and negative roi bed file for sample
samplepositiveData <- subset(positiveData, positiveData$sampleID == sample)
samplepositiveFile <- file.path(tempDir, "positive.bed")
write.table(samplepositiveData, samplepositiveFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
samplenegativeData <- subset(negativeData, negativeData$sampleID == sample)
samplenegativeFile <- file.path(tempDir, "negative.bed")
write.table(samplenegativeData, samplenegativeFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Compare sampleCNVs with validated results to obtain TP and FP
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplepositiveFile, "> TP.bed"))
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplenegativeFile, "> FP.bed"))
# read files
if (file.size("TP.bed") != 0) {TPsample <- read.table("TP.bed", sep = "\t", stringsAsFactors=FALSE)} else {TPsample <- NULL}
if (file.size("FP.bed") != 0) {FPsample <- read.table("FP.bed", sep = "\t", stringsAsFactors=FALSE)} else {FPsample <- NULL}
# Edit files
if(!is.null(TPsample)){
n <- nrow(TPsample)
sampleID <- rep(sample, n)
algorithmID <- rep(algorithm, n)
TPsample <- cbind(TPsample, sampleID, algorithmID)
TPdata <- rbind(TPdata, TPsample)
}
if(!is.null(FPsample)){
n <- nrow(FPsample)
sampleID <- rep(sample, n)
algorithmID <- rep(algorithm, n)
FPsample <- cbind(FPsample, sampleID, algorithmID)
FPdata <- rbind(FPdata, FPsample)
}
}
}
}
View(positiveData)
View(negativeData)
View(TPsample)
View(TPdata)
View(FPdata)
View(sampleData)
View(TPsample)
View(TPdata)
# Run over dataset and obtain list with FP, FN, TP and TN
for (dataset in c("all", "single")){
bedFile <- file.path(bedDir, paste0(dataset, "_rois.bed"))
bedData <- read.table(bedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
# Generate separate bedfiles for positives and negatives
positiveData <- subset(bedData, bedData$cnv == "ExonCNV")
negativeData <- subset(bedData, bedData$cnv == "Normal")
# Add ROI ID
positiveData$ID <- 1:nrow(positiveData)
negativeData$ID <- 1:nrow(negativeData)
# Import cnvfounds file
cnvDir <- file.path(analysisDir, "cnvfounds", dataset)
cnvFiles <- list.files(cnvDir, pattern = ".txt")
# Create dataframes for result saving
FPdata <- data.frame()
TPdata <- data.frame()
# Run over results algorithms
for (cnvFile in cnvFiles){
algorithm <- sub("cnvFounds_", "", cnvFile)
algorithm <- sub(".txt", "", algorithm)
# Import cnvfound data from algorithm
algorithmData <- read.table(file.path(cnvDir, cnvFile), sep = "\t", stringsAsFactors = FALSE, header = TRUE)
# Change colnames
names(algorithmData) <- tolower(names(algorithmData))
names(algorithmData) <- sub("chromosome", "chr", names(algorithmData))
names(algorithmData) <- sub("cnv.type", "type", names(algorithmData))
# Select columns
colNames <- c("chr", "start", "end", "sample","type")
algorithmData <- algorithmData[, colNames]
# Eliminate X in sample name
algorithmData$sample <- as.character(algorithmData$sample)
algorithmData$sample <- sub("X", "", algorithmData$sample)
# Run of sample and check for FP, FN, TP and TN
samples <- unique(algorithmData$sample)
for (sample in samples){
# filter cnvfounds by sample
s <- which(algorithmData$sample == sample)
sampleData <- algorithmData[s, ]
sampleFile <- file.path(tempDir, "sample.bed")
write.table(sampleData, sampleFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Make positive roi and negative roi bed file for sample
samplepositiveData <- subset(positiveData, positiveData$sampleID == sample)
samplepositiveFile <- file.path(tempDir, "positive.bed")
write.table(samplepositiveData, samplepositiveFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
samplenegativeData <- subset(negativeData, negativeData$sampleID == sample)
samplenegativeFile <- file.path(tempDir, "negative.bed")
write.table(samplenegativeData, samplenegativeFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Compare sampleCNVs with validated results to obtain TP and FP
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplepositiveFile, "> TP.bed"))
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplenegativeFile, "> FP.bed"))
# read files
if (file.size("TP.bed") != 0) {TPsample <- read.table("TP.bed", sep = "\t", stringsAsFactors=FALSE)} else {TPsample <- NULL}
if (file.size("FP.bed") != 0) {FPsample <- read.table("FP.bed", sep = "\t", stringsAsFactors=FALSE)} else {FPsample <- NULL}
# Add found TP and FP to dataframe
if(!is.null(TPsample)){
n <- nrow(TPsample)
sampleID <- rep(sample, n)
algorithmID <- rep(algorithm, n)
TPsample <- cbind(TPsample, sampleID, algorithmID)
TPdata <- rbind(TPdata, TPsample)
}
if(!is.null(FPsample)){
n <- nrow(FPsample)
sampleID <- rep(sample, n)
algorithmID <- rep(algorithm, n)
FPsample <- cbind(FPsample, sampleID, algorithmID)
FPdata <- rbind(FPdata, FPsample)
}
}
}
}
View(TPsample)
View(TPdata)
View(sampleData)
View(TPdata)
assign(paste0(dataset, "Results"), data.frame())
View(bedData)
# Delete redundant columns
FPdata <- FPdata[, c(6:17)]
TPdata <- TPdata[, c(6:17)]
colnames(FPdata) <- colnames(TPdata) <- c(colnames(bedData), "roiID", "sampleID", "algorithmID")
View(TPdata)
# Run over dataset and obtain list with FP, FN, TP and TN
for (dataset in c("all", "single")){
bedFile <- file.path(bedDir, paste0(dataset, "_rois.bed"))
bedData <- read.table(bedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
# Generate separate bedfiles for positives and negatives
positiveData <- subset(bedData, bedData$cnv == "ExonCNV")
negativeData <- subset(bedData, bedData$cnv == "Normal")
# Add ROI ID
positiveData$ID <- 1:nrow(positiveData)
negativeData$ID <- 1:nrow(negativeData)
# Import cnvfounds file
cnvDir <- file.path(analysisDir, "cnvfounds", dataset)
cnvFiles <- list.files(cnvDir, pattern = ".txt")
# Create dataframes for result saving
FPdata <- data.frame()
TPdata <- data.frame()
# Run over results algorithms
for (cnvFile in cnvFiles){
algorithm <- sub("cnvFounds_", "", cnvFile)
algorithm <- sub(".txt", "", algorithm)
# Import cnvfound data from algorithm
algorithmData <- read.table(file.path(cnvDir, cnvFile), sep = "\t", stringsAsFactors = FALSE, header = TRUE)
# Change colnames
names(algorithmData) <- tolower(names(algorithmData))
names(algorithmData) <- sub("chromosome", "chr", names(algorithmData))
names(algorithmData) <- sub("cnv.type", "type", names(algorithmData))
# Select columns
colNames <- c("chr", "start", "end", "sample","type")
algorithmData <- algorithmData[, colNames]
# Eliminate X in sample name
algorithmData$sample <- as.character(algorithmData$sample)
algorithmData$sample <- sub("X", "", algorithmData$sample)
# Run of sample and check for FP, FN, TP and TN
samples <- unique(algorithmData$sample)
for (sample in samples){
# filter cnvfounds by sample
s <- which(algorithmData$sample == sample)
sampleData <- algorithmData[s, ]
sampleFile <- file.path(tempDir, "sample.bed")
write.table(sampleData, sampleFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Make positive roi and negative roi bed file for sample
samplepositiveData <- subset(positiveData, positiveData$sampleID == sample)
samplepositiveFile <- file.path(tempDir, "positive.bed")
write.table(samplepositiveData, samplepositiveFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
samplenegativeData <- subset(negativeData, negativeData$sampleID == sample)
samplenegativeFile <- file.path(tempDir, "negative.bed")
write.table(samplenegativeData, samplenegativeFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Compare sampleCNVs with validated results to obtain TP and FP
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplepositiveFile, "> TP.bed"))
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplenegativeFile, "> FP.bed"))
# read files
if (file.size("TP.bed") != 0) {TPsample <- read.table("TP.bed", sep = "\t", stringsAsFactors=FALSE)} else {TPsample <- NULL}
if (file.size("FP.bed") != 0) {FPsample <- read.table("FP.bed", sep = "\t", stringsAsFactors=FALSE)} else {FPsample <- NULL}
# Add found TP and FP to dataframe
if(!is.null(TPsample)){
n <- nrow(TPsample)
algorithmID <- rep(algorithm, n)
TPsample <- cbind(TPsample, algorithmID)
TPdata <- rbind(TPdata, TPsample)
}
if(!is.null(FPsample)){
n <- nrow(FPsample)
algorithmID <- rep(algorithm, n)
FPsample <- cbind(FPsample, algorithmID)
FPdata <- rbind(FPdata, FPsample)
}
}
}
# Delete redundant columns
FPdata <- FPdata[, c(6:16)]
TPdata <- TPdata[, c(6:16)]
colnames(FPdata) <- colnames(TPdata) <- c(colnames(bedData), "roiID", "algorithmID")
}
View(TPsample)
View(TPdata)
View(positiveData)
View(negativeData)
# Add ROI ID
positiveData$ID <- 1:nrow(positiveData)
negativeData$ID <- nrow(positiveData)+1:nrow(negativeData)+nrow(positiveData)
View(negativeData)
View(negativeData)
View(positiveData)
View(negativeData)
nrow(positiveData)+1
nrow(negativeData)+nrow(positiveData)
(1+nrow(positiveData)):nrow(bedData)
# Add ROI ID
positiveData$ID <- 1:nrow(positiveData)
negativeData$ID <- (1+nrow(positiveData)):nrow(bedData)
View(negativeData)
View(positiveData)
View(negativeData)
algorithms <- unique(ResultsDataframe$algorithmID)
algorithms <- unique(TPdata$algorithmID, FPdata$algorithmID)
algorithms <- unique(c(TPdata$algorithmID, FPdata$algorithmID))
# Delete redundant columns
FPdata <- FPdata[, c(6:16)]
TPdata <- TPdata[, c(6:16)]
colnames(FPdata) <- colnames(TPdata) <- c(colnames(bedData), "roiID", "algorithmID")
PosData <- rbind(TPdata, FPdata)
View(PosData)
# Run over dataset and obtain list with FP, FN, TP and TN
for (dataset in c("all", "single")){
bedFile <- file.path(bedDir, paste0(dataset, "_rois.bed"))
bedData <- read.table(bedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
# Generate separate bedfiles for positives and negatives
positiveData <- subset(bedData, bedData$cnv == "ExonCNV")
negativeData <- subset(bedData, bedData$cnv == "Normal")
# Add ROI ID
positiveData$ID <- 1:nrow(positiveData)
negativeData$ID <- (1+nrow(positiveData)):nrow(bedData)
# Import cnvfounds file
cnvDir <- file.path(analysisDir, "cnvfounds", dataset)
cnvFiles <- list.files(cnvDir, pattern = ".txt")
# Create dataframes for result saving
FPdata <- data.frame()
TPdata <- data.frame()
# Run over results algorithms
for (cnvFile in cnvFiles){
algorithm <- sub("cnvFounds_", "", cnvFile)
algorithm <- sub(".txt", "", algorithm)
# Import cnvfound data from algorithm
algorithmData <- read.table(file.path(cnvDir, cnvFile), sep = "\t", stringsAsFactors = FALSE, header = TRUE)
# Change colnames
names(algorithmData) <- tolower(names(algorithmData))
names(algorithmData) <- sub("chromosome", "chr", names(algorithmData))
names(algorithmData) <- sub("cnv.type", "type", names(algorithmData))
# Select columns
colNames <- c("chr", "start", "end", "sample","type")
algorithmData <- algorithmData[, colNames]
# Eliminate X in sample name
algorithmData$sample <- as.character(algorithmData$sample)
algorithmData$sample <- sub("X", "", algorithmData$sample)
# Run of sample and check for FP, FN, TP and TN
samples <- unique(algorithmData$sample)
for (sample in samples){
# filter cnvfounds by sample
s <- which(algorithmData$sample == sample)
sampleData <- algorithmData[s, ]
sampleFile <- file.path(tempDir, "sample.bed")
write.table(sampleData, sampleFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Make positive roi and negative roi bed file for sample
samplepositiveData <- subset(positiveData, positiveData$sampleID == sample)
samplepositiveFile <- file.path(tempDir, "positive.bed")
write.table(samplepositiveData, samplepositiveFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
samplenegativeData <- subset(negativeData, negativeData$sampleID == sample)
samplenegativeFile <- file.path(tempDir, "negative.bed")
write.table(samplenegativeData, samplenegativeFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Compare sampleCNVs with validated results to obtain TP and FP
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplepositiveFile, "> TP.bed"))
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplenegativeFile, "> FP.bed"))
# read files
if (file.size("TP.bed") != 0) {TPsample <- read.table("TP.bed", sep = "\t", stringsAsFactors=FALSE)} else {TPsample <- NULL}
if (file.size("FP.bed") != 0) {FPsample <- read.table("FP.bed", sep = "\t", stringsAsFactors=FALSE)} else {FPsample <- NULL}
# Add found TP and FP to dataframe
if(!is.null(TPsample)){
n <- nrow(TPsample)
algorithmID <- rep(algorithm, n)
TPsample <- cbind(TPsample, algorithmID)
TPdata <- rbind(TPdata, TPsample)
}
if(!is.null(FPsample)){
n <- nrow(FPsample)
algorithmID <- rep(algorithm, n)
FPsample <- cbind(FPsample, algorithmID)
FPdata <- rbind(FPdata, FPsample)
}
}
}
# Delete redundant columns
FPdata <- FPdata[, c(6:16)]
TPdata <- TPdata[, c(6:16)]
colnames(FPdata) <- colnames(TPdata) <- c(colnames(bedData), "roiID", "algorithmID")
PosData <- rbind(TPdata, FPdata)
# Make final result dataframe
ResultsDataframe <- rbind(positiveData, negativeData)
ResultsDataframe$cnvkit5 <- 0
ResultsDataframe$convading <- 0
ResultsDataframe$decon <- 0
ResultsDataframe$exomedepth <- 0
ResultsDataframe$manta <- 0
ResultsDataframe$panelcn <- 0
algorithms <- unique(c(TPdata$algorithmID, FPdata$algorithmID))
for(i in 1:nrow(ResultsDataframe)){
for(j in algorithms){
a <- which(PosData$algorithmID == j & PosData$roiID == i)
if(length(a) > 0){
ResultsDataframe[i, j] <- 1
}
}
}
# Assign results to dataframe for dataset
assign(paste0(dataset, "Results"), ResultsDataframe)
}
View(singleResults)
# Run over dataset and obtain list with FP, FN, TP and TN
for (dataset in c("all", "single")){
bedFile <- file.path(bedDir, paste0(dataset, "_rois.bed"))
bedData <- read.table(bedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
# Generate separate bedfiles for positives and negatives
positiveData <- subset(bedData, bedData$cnv == "ExonCNV")
negativeData <- subset(bedData, bedData$cnv == "Normal")
# Add ROI ID
positiveData$ID <- 1:nrow(positiveData)
negativeData$ID <- (1+nrow(positiveData)):nrow(bedData)
# Import cnvfounds file
cnvDir <- file.path(analysisDir, "cnvfounds", dataset)
cnvFiles <- list.files(cnvDir, pattern = ".txt")
# Create dataframes for result saving
FPdata <- data.frame()
TPdata <- data.frame()
# Run over results algorithms
for (cnvFile in cnvFiles){
algorithm <- sub("cnvFounds_", "", cnvFile)
algorithm <- sub(".txt", "", algorithm)
# Import cnvfound data from algorithm
algorithmData <- read.table(file.path(cnvDir, cnvFile), sep = "\t", stringsAsFactors = FALSE, header = TRUE)
# Change colnames
names(algorithmData) <- tolower(names(algorithmData))
names(algorithmData) <- sub("chromosome", "chr", names(algorithmData))
names(algorithmData) <- sub("cnv.type", "type", names(algorithmData))
# Select columns
colNames <- c("chr", "start", "end", "sample","type")
algorithmData <- algorithmData[, colNames]
# Eliminate X in sample name
algorithmData$sample <- as.character(algorithmData$sample)
algorithmData$sample <- sub("X", "", algorithmData$sample)
# Run of sample and check for FP, FN, TP and TN
samples <- unique(algorithmData$sample)
for (sample in samples){
# filter cnvfounds by sample
s <- which(algorithmData$sample == sample)
sampleData <- algorithmData[s, ]
sampleFile <- file.path(tempDir, "sample.bed")
write.table(sampleData, sampleFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Make positive roi and negative roi bed file for sample
samplepositiveData <- subset(positiveData, positiveData$sampleID == sample)
samplepositiveFile <- file.path(tempDir, "positive.bed")
write.table(samplepositiveData, samplepositiveFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
samplenegativeData <- subset(negativeData, negativeData$sampleID == sample)
samplenegativeFile <- file.path(tempDir, "negative.bed")
write.table(samplenegativeData, samplenegativeFile, sep="\t", row.names = FALSE, quote = FALSE, col.names = FALSE)
# Compare sampleCNVs with validated results to obtain TP and FP
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplepositiveFile, "> TP.bed"))
system(paste("bedtools intersect -wa -wb -a", sampleFile, "-b", samplenegativeFile, "> FP.bed"))
# read files
if (file.size("TP.bed") != 0) {TPsample <- read.table("TP.bed", sep = "\t", stringsAsFactors=FALSE)} else {TPsample <- NULL}
if (file.size("FP.bed") != 0) {FPsample <- read.table("FP.bed", sep = "\t", stringsAsFactors=FALSE)} else {FPsample <- NULL}
# Add found TP and FP to dataframe
if(!is.null(TPsample)){
n <- nrow(TPsample)
algorithmID <- rep(algorithm, n)
TPsample <- cbind(TPsample, algorithmID)
TPdata <- rbind(TPdata, TPsample)
}
if(!is.null(FPsample)){
n <- nrow(FPsample)
algorithmID <- rep(algorithm, n)
FPsample <- cbind(FPsample, algorithmID)
FPdata <- rbind(FPdata, FPsample)
}
}
}
# Delete redundant columns
FPdata <- FPdata[, c(6:16)]
TPdata <- TPdata[, c(6:16)]
colnames(FPdata) <- colnames(TPdata) <- c(colnames(bedData), "roiID", "algorithmID")
PosData <- rbind(TPdata, FPdata)
# Make final result dataframe
ResultsDataframe <- rbind(positiveData, negativeData)
ResultsDataframe$cnvkit5 <- 0
ResultsDataframe$convading <- 0
ResultsDataframe$decon <- 0
ResultsDataframe$exomedepth <- 0
ResultsDataframe$manta <- 0
ResultsDataframe$panelcn <- 0
algorithms <- unique(c(TPdata$algorithmID, FPdata$algorithmID))
for(i in 1:nrow(ResultsDataframe)){
for(j in algorithms){
a <- which(PosData$algorithmID == j & PosData$roiID == i)
if(length(a) > 0){
ResultsDataframe[i, j] <- 1
}
}
}
# Save and assign results to dataframe for dataset
write.table(ResultsDataframe, file.path(resultDir, paste0(dataset, "results.txt")), sep="\t", row.names = FALSE, quote = FALSE, col.names = TRUE)
assign(paste0(dataset, "Results"), ResultsDataframe)
}
View(singleResults)
View(allResults)
# Result table
for(dataframe in list(allResults, singleResults)) {
print(dataframe[1, ])
}
View(FPdata)
View(allResults)
tempDir
bedDir <- file.path(analysisDir, "bedfiles")
evaluationDir <- file.path(analysisDir, "evaluation")
tempDir <- file.path(evaluationDir, "temp")
resultDir <- file.path(evaluationDir, "results")
tempDir
# Result table
for(resultframe in list(allResults, singleResults)) {
Pos <- length(resultframe$cnv == "ExonCNV")
TP <- as.vector(colSums(resultframe[1:Pos, 11:16]))
FN <- as.vector(nrow(resultframe[1:Pos]) - as.vector(colSums(resultframe[1:Pos, 11:16])))
FP <- as.vector(colSums(resultframe[Pos+1:nrow(resultframe), 11:16]))
TN <- as.vector(nrow(resultframe[Pos+1:nrow(resultframe)]) - as.vector(colSums(resultframe[Pos+1:nrow(resultframe), 11:16])))
}
# Result table
for(resultframe in list(allResults, singleResults)) {
Pos <- length(resultframe$cnv == "ExonCNV")
TP <- as.vector(colSums(resultframe[1:Pos, 11:16]))
FN <- as.vector(nrow(resultframe[1:Pos, ]) - as.vector(colSums(resultframe[1:Pos, 11:16])))
FP <- as.vector(colSums(resultframe[Pos+1:nrow(resultframe), 11:16]))
TN <- as.vector(nrow(resultframe[Pos+1:nrow(resultframe), ]) - as.vector(colSums(resultframe[Pos+1:nrow(resultframe), 11:16])))
}
Pos+1
Pos
length(resultframe$cnv == "ExonCNV")
resultframe$cnv
resultframe$cnv[resultframe$cnv == "ExonCNV"]
# Result table
for(resultframe in list(allResults, singleResults)) {
Pos <- length(resultframe$cnv[resultframe$cnv == "ExonCNV"])
TP <- as.vector(colSums(resultframe[1:Pos, 11:16]))
FN <- as.vector(nrow(resultframe[1:Pos, ]) - as.vector(colSums(resultframe[1:Pos, 11:16])))
FP <- as.vector(colSums(resultframe[(Pos+1):nrow(resultframe), 11:16]))
TN <- as.vector(nrow(resultframe[(Pos+1):nrow(resultframe), ]) - as.vector(colSums(resultframe[Pos+1:nrow(resultframe), 11:16])))
}
1:Pos
(Pos+1):nrow(resultframe)
1+Pos
nrow(resultframe[1:Pos, ])
# Result table
for(resultframe in list(allResults, singleResults)) {
Pos <- length(resultframe$cnv[resultframe$cnv == "ExonCNV"])
TP <- as.vector(colSums(resultframe[1:Pos, 11:16]))
FN <- as.vector(nrow(resultframe[1:Pos, ]) - as.vector(colSums(resultframe[1:Pos, 11:16])))
FP <- as.vector(colSums(resultframe[(Pos+1):nrow(resultframe), 11:16]))
TN <- as.vector(nrow(resultframe[(1+Pos):nrow(resultframe), ]) - as.vector(colSums(resultframe[(Pos+1):nrow(resultframe), 11:16])))
}
as.character(resultframe)
allResults
resultName <- deparse(substitute(resultframe))
## Add identifier to result dataframes
comment(allResults) <- "all"
comment(singleResults) <- "single"
for(resultframe in list(allResults, singleResults)) {
# Obtain name dataframe
resultName <- comment(resultframe)
# Calculate TP, FN, FP, TN
Pos <- length(resultframe$cnv[resultframe$cnv == "ExonCNV"])
TP <- as.vector(colSums(resultframe[1:Pos, 11:16]))
FN <- as.vector(nrow(resultframe[1:Pos, ]) - as.vector(colSums(resultframe[1:Pos, 11:16])))
FP <- as.vector(colSums(resultframe[(Pos+1):nrow(resultframe), 11:16]))
TN <- as.vector(nrow(resultframe[(1+Pos):nrow(resultframe), ]) - as.vector(colSums(resultframe[(Pos+1):nrow(resultframe), 11:16])))
# Calculate Specificity and sensitivity
Total <- TP + FN + FP + TN
Spec <- round(TN / (TN + FP), 4)
Sens <- round(TP / (TP + FN), 4)
# Export result table
resultTable <- cbind(TP, TN, FP, FN, Total, Sens, Spec, names(resultframe[, 11:16]))
write.table(resultTable, file.path(resultDir, paste0("summary_", resultName, ".txt")), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
}
