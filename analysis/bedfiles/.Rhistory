BiocManager::install("cn.mops")
library(panelcn.mops)
BiocManager::install("panelcn.mops")
bed.file<-read.table(paste(bedfile))                                                    #reads in the bedfile and gives each column a name - expects 4 columns: chr, start, stop, name/gene.
bam_file="/home/robin/Documents/Project/Samples/example/bam_ex"                                                                   #location of bam files; can be a directory containing only bam files to be processed or the name of a file containing a list of bam files to be processed.
bedfile="/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38.bed"                                                                       #name of bed file
fasta="/home/robin/Documents/Project/Samples/hg38/hg38.fa"                                                                     #name of fasta file
exonfile="/home/robin/Documents/Project/Samples/bedfiles/exons_hg38.bed`"
output="/home/robin/Documents/Project/Results/panelcnmops"
bed.file<-read.table(paste(bedfile))                                                    #reads in the bedfile and gives each column a name - expects 4 columns: chr, start, stop, name/gene.
colnames(bed.file)<-c("chromosome","start","end","name")
library(panelcn.mops)
countWindow <- getWindows(bed.file)
View(bed.file)
countWindow <- getWindows(bedfile)
View(countWindow)
exon.bed<-read.table(paste(exonfile))                                                    #reads in the bedfile and gives each column a name - expects 4 columns: chr, start, stop, name/gene.
exonfile="/home/robin/Documents/Project/Samples/bedfiles/exons_hg38.bed"
exon.bed<-read.table(paste(exonfile))                                                    #reads in the bedfile and gives each column a name - expects 4 columns: chr, start, stop, name/gene.
exon.bed$V6<-paste(exon.bed$V4, exon.bed$V5, collapse = ".")
View(exon.bed)
exon.bed<-read.table(paste(exonfile))
View(exon.bed)
splitting <- function(x){strsplit(x, split="_")}
exons <- exon.bed$V5
exons <- as.data.frame(exon.bed$V5)
apply(exons, 1, splitting)
unlist(apply(exons, 1, splitting))
as.data.frame(unlist(apply(exons, 1, splitting)))
as.data.frame((apply(exons, 1, splitting)))
library(stringr)
str_split_fixed(exons, "_", 2)
v<- str_split_fixed(exons, "_", 2)
View(v)
v<- str_split_fixed(exons, "_", 1)
View(v)
out <- strsplit(as.character(exons), "_")
do.call(rbind, out)
exons <- exon.bed$V5
out <- strsplit(exons, "_")
do.call(rbind, out)
exon.bed<-read.table(paste(exonfile))
exons <- exon.bed$V5
out <- strsplit(exons, "_")
do.call(rbind, out)
View(out)
unlist(out)
as.data.frame(out)
exons <- as.data.frameexon.bed$V5
exons <- data.frame(exon.bed$V5)
data.frame(do.call("rbind", strsplit(as.character(exons$exon.bed.V5), "_", fixed = TRUE)))
View(out)
View(exons)
View(exons)
setwd("~/Documents/Project/Samples/bedfiles")
setwd("~/Documents/Project/Samples/bedfiles")
ICR96_hg38_bed <- read_delim("ICR96_hg38.bed.txt",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X1 = col_character()),
trim_ws = TRUE)
ICR96_hg38_bed <- read_delim("ICR96_hg38.bed",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X1 = col_character()),
trim_ws = TRUE)
library(readr)
ICR96_hg38_bed <- read_delim("ICR96_hg38.bed",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X1 = col_character()),
trim_ws = TRUE)
ICR96_hg38_bed <- transform(ICR96_hg38_bed, x= ave(X2,X4,FUN=function(x) order(x,decreasing=F)))
ICR96_hg38_bed$X7 <- paste0(ICR96_hg38_bed$X4, ".E", ICR96_hg38_bed$x)
exons.Hhg38 <- ICR96_hg38_bed[, c(1:4,7)]
exons.hg38 <- ICR96_hg38_bed[, c(1:4,7)]
ICR96_hg38_bed$X7 <- paste0(ICR96_hg38_bed$X4, ".E", ICR96_hg38_bed$x)
View(ICR96_hg38_bed)
ICR96_hg38_bed <- read_delim("ICR96_hg38.bed",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X1 = col_character()),
trim_ws = TRUE)
ICR96_hg38_bed <- transform(ICR96_hg38_bed, x= ave(X2,X4,FUN=function(x) order(x,decreasing=F)))
# Gene_n format
ICR96_hg38_bed$X6 <- paste0(ICR96_hg38_bed$X4, "_", ICR96_hg38_bed$x)
exons_hg38 <- ICR96_hg38_bed[, c(1:4,6)]
write.table(exons_hg38, file = "exons_hg38.bed", quote=FALSE, sep="\t", row.names=FALSE)
ICR96_hg38_bed$X7 <- paste0(ICR96_hg38_bed$X4, ".E", ICR96_hg38_bed$x)
exons.hg38 <- ICR96_hg38_bed[, c(1:4,7)]
View(ICR96_hg38_bed)
View(exons.hg38)
write.table(exons.hg38, file = "exons.hg38.bed", quote=FALSE, sep="\t", row.names=FALSE)
bam_file="/home/robin/Documents/Project/Samples/example/bam_ex"                                                                   #location of bam files; can be a directory containing only bam files to be processed or the name of a file containing a list of bam files to be processed.
bedfile="/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38.bed"                                                                       #name of bed file
fasta="/home/robin/Documents/Project/Samples/hg38/hg38.fa"                                                                     #name of fasta file
exonfile="/home/robin/Documents/Project/Samples/bedfiles/exons.hg38.bed"
output="/home/robin/Documents/Project/Results/panelcnmops"
# Input
countWindow <- getWindows(exonfile)
bed.file<-read.table(paste(exonfile))
View(bed.file)
library(readr)
setwd("~/Documents/Project/Samples/bedfiles")
ICR96_hg38_bed <- read_delim("ICR96_hg38.bed",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X1 = col_character()),
trim_ws = TRUE)
ICR96_hg38_bed <- transform(ICR96_hg38_bed, x= ave(X2,X4,FUN=function(x) order(x,decreasing=F)))
# Gene_n format
ICR96_hg38_bed$X6 <- paste0(ICR96_hg38_bed$X4, "_", ICR96_hg38_bed$x)
exons_hg38 <- ICR96_hg38_bed[, c(1:4,6)]
write.table(exons_hg38, file = "exons_hg38.bed", quote=FALSE, sep="\t", row.names=FALSE, col.names = FALSE)
ICR96_hg38_bed$X7 <- paste0(ICR96_hg38_bed$X4, ".E", ICR96_hg38_bed$x)
exons.hg38 <- ICR96_hg38_bed[, c(1:4,7)]
write.table(exons.hg38, file = "exons.hg38.bed", quote=FALSE, sep="\t", row.names=FALSE, col.names = FALSE)
# Input
countWindow <- getWindows(exonfile)
View(countWindow)
View(exons.hg38)
exons.hg38 <- ICR96_hg38_bed[, c(1:3,7)]
write.table(exons.hg38, file = "exons.hg38.bed", quote=FALSE, sep="\t", row.names=FALSE, col.names = FALSE)
# Input
countWindow <- getWindows(exonfile)
View(countWindow)
bams<-list.files(bam_file,pattern=".bam",full.names=T)
bais<-grep("bai",bams)
if(length(bais)>0){
bams<-bams[-bais]
}
bamCount <- countBamListInGRanges(countWindows = countWindow,
bam.files = bams, read.width = FALSE)
View(bamCount)
(bamCount)
bam_file="/home/robin/Documents/Project/Samples/example/bam_ex"                                                                   #location of bam files; can be a directory containing only bam files to be processed or the name of a file containing a list of bam files to be processed.
bedfile="/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38.bed"                                                                       #name of bed file
fasta="/home/robin/Documents/Project/Samples/hg38/hg38.fa"                                                                     #name of fasta file
exonfile="/home/robin/Documents/Project/TFM_code/Files/ExomeDepth/exons_hg38.bed"
output="/home/robin/Documents/Project/Results/ExomeDepth"
# Create count data
bams<-list.files(bam_file,pattern=".bam",full.names=T)
bais<-grep("bai",bams)
if(length(bais)>0){
bams<-bams[-bais]
}
bed.file<-read.table(paste(bedfile))                                                    #reads in the bedfile and gives each column a name - expects 4 columns: chr, start, stop, name/gene.
colnames(bed.file)<-c("chromosome","start","end","name")
my.counts <- getBamCounts(bed.frame = bed.file,
bam.files = bams,
include.chr = FALSE,
referenceFasta = fasta)
library(ExomeDepth)
library(GenomicRanges)
my.counts <- getBamCounts(bed.frame = bed.file,
bam.files = bams,
include.chr = FALSE,
referenceFasta = fasta)
multi_strsplit<-function(x,splits,y){
X<-x
for(i in 1:length(splits)){X=strsplit(X,splits[i])[[1]][y[i]]}
return(X)
}
a<-length(strsplit(bams[1],"/")[[1]])
sample.names<-sapply(bams,multi_strsplit,c("/",".bam"),c(a,1))
names(sample.names)<-NULL
ExomeCount.dafr <- as(my.counts, "data.frame")
exons.hg38 <- read.table(paste(exonfile))
colnames(exons.hg38)<-c("chromosome","start","end","gene", "name")
bam_file="/home/robin/Documents/Project/Samples/example/bam_ex"                                                                   #location of bam files; can be a directory containing only bam files to be processed or the name of a file containing a list of bam files to be processed.
bedfile="/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38.bed"                                                                       #name of bed file
fasta="/home/robin/Documents/Project/Samples/hg38/hg38.fa"                                                                     #name of fasta file
exonfile="/home/robin/Documents/Project/TFM_code/Files/ExomeDepth/exons_hg38.bed"
output="/home/robin/Documents/Project/Results/ExomeDepth"
exons.hg38 <- read.table(paste(exonfile))
exonfile="/home/robin/Documents/Project/Samples/bedfiles/exons_hg38.bed"
exons.hg38 <- read.table(paste(exonfile))
colnames(exons.hg38)<-c("chromosome","start","end","gene", "name")
exons.hg38$chromosome <- as.character(exons.hg38$chromosome)
exons.hg38.GRanges <- GRanges(seqnames = exons.hg38$chromosome,
IRanges(start=exons.hg38$start,
end=exons.hg38$end),
names = exons.hg38$name)
### prepare the main matrix of read count data
ExomeCount.mat <- as.matrix(ExomeCount.dafr[, grep(names(ExomeCount.dafr), pattern = "X")])
nsamples <- ncol(ExomeCount.mat)
### start looping over each sample
for (i in 1:nsamples){
#### Create the aggregate reference set for this sample
my.choice <- select.reference.set (test.counts =  ExomeCount.mat[,i],
reference.counts = ExomeCount.mat[,-i],
bin.length = (ExomeCount.dafr$end - ExomeCount.dafr$start)/1000,
n.bins.reduced = 10000)
my.reference.selected <- apply(X = ExomeCount.mat[, my.choice$reference.choice, drop = FALSE],
MAR = 1,
FUN = sum)
message('Now creating the ExomeDepth object')
all.exons <- new('ExomeDepth',test = ExomeCount.mat[,i],
reference = my.reference.selected,
formula = 'cbind(test, reference) ~ 1')
################ Now call the CNVs
all.exons <- CallCNVs(x = all.exons,
transition.probability = 10^-4,
chromosome = ExomeCount.dafr$chromosome,
start = ExomeCount.dafr$start,
end = ExomeCount.dafr$end,
name = ExomeCount.dafr$exon)
########################### Now annotate the ExomeDepth object
#all.exons <- AnnotateExtra(x = all.exons,
#                           reference.annotation = Conrad.hg19.common.CNVs,
#                           min.overlap = 0.5,
#                           column.name = 'Conrad.hg19')
all.exons <- AnnotateExtra(x = all.exons,
reference.annotation = exons.hg38.GRanges,
min.overlap = 0.0001,
column.name = 'exons.hg38')
output.file <- paste(sample.names[i], '.csv', sep = '')
write.csv(file = file.path(output, output.file), x = all.exons@CNV.calls, row.names = FALSE)
}
library(R.utils)
args=commandArgs(asValues = TRUE)
library(panelcn.mops)
library(GenomicRanges)
#bam_file=args$bams
#bedfile=args$bed
#fasta=args$fasta
#exonfile=args$exon
#output=args$out
bam_file="/home/robin/Documents/Project/Samples/example/bam_ex"                                                                   #location of bam files; can be a directory containing only bam files to be processed or the name of a file containing a list of bam files to be processed.
bedfile="/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38.bed"                                                                       #name of bed file
fasta="/home/robin/Documents/Project/Samples/hg38/hg38.fa"                                                                     #name of fasta file
exonfile="/home/robin/Documents/Project/Samples/bedfiles/exons.hg38.bed"
output="/home/robin/Documents/Project/Results/panelcnmops"
# Input
countWindow <- getWindows(exonfile)
# Count BamReads
bams<-list.files(bam_file,pattern=".bam",full.names=T)
bais<-grep("bai",bams)
if(length(bais)>0){
bams<-bams[-bais]
}
### Sample names
multi_strsplit<-function(x,splits,y){
X<-x
for(i in 1:length(splits)){X=strsplit(X,splits[i])[[1]][y[i]]}
return(X)
}
a<-length(strsplit(bams[1],"/")[[1]])
sample.names<-sapply(bams,multi_strsplit,c("/",".bam"),c(a,1))
names(sample.names)<-NULL
bamCount <- countBamListInGRanges(countWindows = countWindow,
bam.files = bams, read.width = FALSE)
View(bamCount)
bamCount[1]
bamCount@elementMetadata@listData
bamCount@elementMetadata@listData$`17296.bam`
test@elementMetadata@listData[1]
test <- bamCount
test@elementMetadata@listData
test@elementMetadata@listData[1]
test@elementMetadata@listData <- test@elementMetadata@listData[1]
control <- bamCount
control@elementMetadata@listData <- control@elementMetadata@listData[-1]
elementMetadata(test) <- cbind(elementMetadata(test), elementMetadata(control))
resultlist <- runPanelcnMops(test, countWindows = countWindow)
View(resultlist)
(str(resultlist[[1]]))
integerCopyNumber(resultlist[[1]])[1:7]
resultlist <- runPanelcnMops(bamCount, countWindows = countWindow)
resulttable <- createResultTable(resultlist = resultlist, XandCB = bamCount,
countWindows = countWindow,
sampleNames = sample.names)
View(resulttable)
sampleNames <- colnames(elementMetadata(test))
sampleNames <- colnames(elementMetadata(bamCount))
resulttable <- createResultTable(resultlist = resultlist, XandCB = bamCount,
countWindows = countWindow,
sampleNames = sampleNames)
View(resulttable)
integerCopyNumber(resultlist[[1]])
test <- integerCopyNumber(resultlist[[1]])
View(test)
test@elementMetadata@listData[["17296.bam"]]
resulttable <- createResultTable(resultlist = resultlist, XandCB = bamCount,
countWindows = countWindow,
sampleNames = sampleNames)
View(resulttable)
resulttable[[1]]$CN
resulttable[[1]]
subset(resulttable[[1]], CN == "CN1"
)
resulttable <- createResultTable(resultlist = resultlist, XandCB = bamCount[2],
countWindows = countWindow,
sampleNames = sampleNames)
View(resultlist)
install.packages("plyr")
library(plyr)
XandCB <- bamCount
elementMetadata(XandCB) <- cbind(elementMetadata(XandCB), elementMetadata(XandCB))
resultList <- runPanelcnMops(XandCB, 1:ncol(elementMetadata(bamCount)),countWindows = countWindow)
# Build results table
sampleNames <- colnames(elementMetadata(bamCount))
finalResultsTable <- createResultTable(resultlist = resultList, XandCB = XandCB, countWindows = countWindow,
sampleNames = sampleNames)
allResults <- ldply(finalResultsTable, data.frame) # concat output from all samples
View(allResults)
# Save results
colNames <- c("Sample", "Gene", "Chr", "Start", "End", "lowQual", "CN")
filteredResults <- allResults[(allResults$CN != "CN2") & (allResults$lowQual != "lowQual"),colNames] # only deletions/duplications (CN2 means normal), and high quality
filteredResults$CNV.type <- lapply(filteredResults$CN, function(x) sapply(x, auxCNname)) # Add CNV.type column before storing file
auxCNname <- function(x) {
if (x %in% c("CN0", "CN1")) return("deletion")
else if (x %in% c("CN3", "CN4")) return("duplication")
}
filteredResults <- allResults[(allResults$CN != "CN2") & (allResults$lowQual != "lowQual"),colNames] # only deletions/duplications (CN2 means normal), and high quality
filteredResults$CNV.type <- lapply(filteredResults$CN, function(x) sapply(x, auxCNname)) # Add CNV.type column before storing file
filteredResults$CNV.type <- as.factor(unlist(filteredResults$CNV.type))  # R things...
write.table(filteredResults, file.path(output, "results.tsv"), sep="\t", row.names=FALSE, quote = FALSE)  # write output file
write.table(filteredResults, outputFile, sep="\t", row.names=FALSE, quote = FALSE)  # write output file
outputFile <- file.path(output, "cnvFounds.txt")
write.table(filteredResults, outputFile, sep="\t", row.names=FALSE, quote = FALSE)  # write output file
output="/home/robin/Documents/Project/Results/Panelcnmops"
outputFile <- file.path(output, "cnvFounds.txt")
write.table(filteredResults, outputFile, sep="\t", row.names=FALSE, quote = FALSE)  # write output file
# Save failed ROIs in a common format
failedROIs <- allResults[allResults$lowQual == "lowQual", colNames] # get all low qual
names(failedROIs)[1]<- "SampleID" # rename Sample column
failedROIs <- failedROIs[,c(1,3,4,5,2)] # reorder and filter columns
failedROIs[,1] <- unlist(strsplit(data.frame(lapply(failedROIs, as.character), stringsAsFactors=FALSE)[,1],"\\.bam"))  # remove .bam from sample names
write.table(failedROIs, file.path(output, "failedROIs.csv"), sep="\t", row.names=FALSE, quote = FALSE) # save
