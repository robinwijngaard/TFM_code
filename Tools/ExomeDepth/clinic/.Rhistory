"0.001"
as.numeric("0.001")
utils="/home/robin/Documents/Project/TFM_code/Tools/ExomeDepth/clinic/utils.r"  #utils R script
bamsDir="/home/robin/Documents/Project/Samples/example/bam_ex"
bedFile="/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38_noSNP.bed"
fastaFile="/home/robin/Documents/Project/Samples/hg38/hg38.fa"
# Output dirs
resultDir="/home/robin/Documents/Project/TFM_code/Tools/ExomeDepth/clinic/results"
# Parameters
run=R1234 #run name
readLength=150 # sequence length
# Optimitzable parametres
phi_bins=1
transition_probability=0.0001
expected_CNV_length=50000
# Load utils functions
source(args$utils)
# returns gene for position matching ROI in bed data
auxGetGene <- function(bedData, chr, pos){
gene <- bedData[bedData$chr == chr & (pos >= bedData$start & pos <= bedData$end), "gene"]
if (length(gene) == 0)
return(NULL)
else
return(gene)
}
# Process ExomeDepth alg. body
processExomedepthBody <- function(testCountsDF, controlCountsDF, countsDef, phi.bins, transition.probability, expected.CNV.length){
all <- data.frame()
for (i in 1:ncol(testCountsDF)) {
# obtain sampleName: remove first char "X"
sampleName = colnames(testCountsDF)[i]
sampleName <-  sub("X", "", sampleName)
# build necessary matrix
if (sampleName %in% colnames(controlCountsDF)){
controlCounts <- as.matrix(controlCountsDF)[, -i]
} else
controlCounts <- as.matrix(controlCountsDF)
testCounts <- as.matrix(testCountsDF)[, i]
# define final controls set
references = select.reference.set(test.counts = testCounts,
reference.count = controlCounts,
bin.length = (countsDF$end - countsDF$start) / 1000,
n.bins.reduced = 10000,
phi.bins = phi.bins)
controls = apply(X = as.matrix(controlCounts[, references$reference.choice]), MAR = 1, FUN = sum)
# call cnvs
all_exons = new('ExomeDepth',
test = testCounts,
reference = controls,
formula = 'cbind(test, reference) ~ 1')
all_exons = CallCNVs(x = all_exons,
transition.probability = transition.probability,
expected.CNV.length = expected.CNV.length,
chromosome = countsDef$chromosome,
start = countsDef$start,
end = countsDef$end,
name = countsDef$exon)
# Save RDS for sample report generation
saveRDS(all_exons, file = file.path(rdsDir, paste0("all_exons_", sampleName, ".RDS")))
if (nrow(all_exons@CNV.calls) > 0){
# add sample column
all_exons@CNV.calls$sample <- sampleName
# add gene column
for(i in 1:nrow(all_exons@CNV.calls)) {
row <- all_exons@CNV.calls[i,]
row$gene <- auxGetGene(bedData, row$chromosome, row$end)
if (is.null(row$gene))
stop(paste("Error: gene not found for chromosome", row$chromosome, ", start", row$start, ", end", row$end))
all_exons@CNV.calls[i, "Gene"] <- row$gene
}
}
all <- rbind(all, all_exons@CNV.calls)
}
return(all)
}
# go over datasets and run ExomeDepth for those which are active
print(paste("Starting ExomeDepth for", run, "dataset", sep=" "))
# read bed file
bedData <- read.table(bedFile, sep="\t", stringsAsFactors=FALSE, col.names = (c("chr", "start", "end", "gene")))
# Parameters
run=R1234 #run name
# Parameters
run="R1234" #run name
# go over datasets and run ExomeDepth for those which are active
print(paste("Starting ExomeDepth for", run, "dataset", sep=" "))
# read bed file
bedData <- read.table(bedFile, sep="\t", stringsAsFactors=FALSE, col.names = (c("chr", "start", "end", "gene")))
# build output folder and file
runDir <- file.path(resultDir, run)
rdsDir <- file.path(runDir, "RDSfiles")
if(!dir.exists(runDir)) {dir.create(runDir)}
if(!dir.exists(rdsDir)) {dir.create(rdsDir)}
# output Files
outputFile <- file.path(runDir, "all_cnv_calls.txt")
# Do pre-calc part of the algorithm
# read bam counts
bamFiles <- list.files(bamsDir, "*.bam$", full.names=T)
counts <- getBamCounts(bed.file = bedFile,
bam.files = bamFiles,
read.width = readLength,
referenceFasta = fastaFile)
suppressPackageStartupMessages(library(ExomeDepth))
library(methods)
library(R.utils)
counts <- getBamCounts(bed.file = bedFile,
bam.files = bamFiles,
read.width = readLength,
referenceFasta = fastaFile)
View(counts)
# Fix rare bug: sometimes X is added at the beginning of input samples
parts <- strsplit(bamFiles[1], "/")
View(parts)
parts[[1]]
original <- gsub(".bam", "", parts[[1]][length(parts[[1]])])
if (substr(original, 1, 1) != "X" && substr(names(countsDF)[6], 1, 1) == "X")
names(countsDF)[6:ncol(countsDF)] <- substring(names(countsDF)[6:ncol(countsDF)] , 2)
countsDF  <- as.data.frame(counts)
names(countsDF) <- gsub(".bam", "", names(countsDF)) # remove .bam from sample name
# Fix rare bug: sometimes X is added at the beginning of input samples
parts <- strsplit(bamFiles[1], "/")
original <- gsub(".bam", "", parts[[1]][length(parts[[1]])])
if (substr(original, 1, 1) != "X" && substr(names(countsDF)[6], 1, 1) == "X")
names(countsDF)[6:ncol(countsDF)] <- substring(names(countsDF)[6:ncol(countsDF)] , 2)
View(countsDF)
# Process each sample
all <- data.frame()
all <- processExomedepthBody(testCountsDF = countsDF[6:ncol(countsDF)],
controlCountsDF = countsDF[6:ncol(countsDF)],
countsDef = countsDF[1:5],
phi.bins = phi.bins,
transition.probability = transition.probability,
expected.CNV.length = expected.CNV.length)
# Optimitzable parametres
phi.bins=1
transition.probability=0.0001
expected_CNV.length=50000
all <- processExomedepthBody(testCountsDF = countsDF[6:ncol(countsDF)],
controlCountsDF = countsDF[6:ncol(countsDF)],
countsDef = countsDF[1:5],
phi.bins = phi.bins,
transition.probability = transition.probability,
expected.CNV.length = expected.CNV.length)
expected.CNV.length=50000
all <- processExomedepthBody(testCountsDF = countsDF[6:ncol(countsDF)],
controlCountsDF = countsDF[6:ncol(countsDF)],
countsDef = countsDF[1:5],
phi.bins = phi.bins,
transition.probability = transition.probability,
expected.CNV.length = expected.CNV.length)
View(all)
View(countsDF)
View(countsDF)
all <- processExomedepthBody(testCountsDF = countsDF[6:ncol(countsDF)],
controlCountsDF = countsDF[6:ncol(countsDF)],
countsDef = countsDF[1:5],
phi.bins = phi.bins,
transition.probability = transition.probability,
expected.CNV.length = expected.CNV.length)
warning()
warnings()
all <- processExomedepthBody(testCountsDF = countsDF[6:ncol(countsDF)],
controlCountsDF = countsDF[6:ncol(countsDF)],
countsDef = countsDF[1:5],
phi.bins = phi.bins,
transition.probability = transition.probability,
expected.CNV.length = expected.CNV.length)
View(countsDF)
countsDF[6:ncol(countsDF)]
View(all)
library(methods)
library(R.utils)
library(gggenes)
library(ggplot2)
library(rmarkdown)
library(DT)
library(ExomeDepth)
library(dplyr)
library(tiff)
library(patchwork)
library(RColorBrewer)
library(R.utils)
library(grid)
library(gridExtra)
library(stringr)
#!/bin/bash
# Output dirs
resultDir="/home/robin/Documents/Project/TFM_code/Implementation/results"
# Parameters
run="R1234" #run name
# For sample report
annotatedFile="/home/robin/Documents/Project/TFM_code/Implementation/annotate/annotatedFile.bed"
panellsFile="/home/robin/Documents/Project/TFM_code/Implementation/files/gens_nm_panell_ICR96.xlsx" #file idnicating genes per panell and NM
markdownfile="/home/robin/Documents/Project/TFM_code/Implementation/scripts/report.Rmd" #rmarkdown file
samplesFile="/home/robin/Documents/Project/TFM_code/Implementation/files/samples.txt" #file indicating sample and panell association
#!/bin/bash
# Output dirs
resultDir="/home/robin/Documents/Project/TFM_code/Implementation/results"
# Parameters
run="R1234" #run name
# For sample report
annotatedFile="/home/robin/Documents/Project/TFM_code/Implementation/annotate/annotatedFile.bed"
panellsFile="/home/robin/Documents/Project/TFM_code/Implementation/files/gens_nm_panell_ICR96.xlsx" #file idnicating genes per panell and NM
markdownfile="/home/robin/Documents/Project/TFM_code/Implementation/scripts/report.Rmd" #rmarkdown file
samplesFile="/home/robin/Documents/Project/TFM_code/Implementation/files/samples.txt" #file indicating sample and panell association
runDir <- file.path(resultDir, run)
rdsDir <- file.path(runDir, "RDSfiles")
tempDir <- file.path(runDir, "temp")
graphsDir <- file.path(tempDir, "graphs")
reportsDir <- file.path(runDir, "reports")
# make temp dir, results dir en graphs dir
if(!dir.exists(resultDir)) dir.create(resultDir)
if(!dir.exists(runDir)) {dir.create(runDir)}
if(!dir.exists(rdsDir)) {dir.create(rdsDir)}
if(!dir.exists(tempDir)) dir.create(tempDir)
if(!dir.exists(graphsDir)) dir.create(graphsDir)
if(!dir.exists(reportsDir)) dir.create(reportsDir)
# Read annotatedFile
annotatedFile <- read.delim(annotatedFile, sep="\t", header = TRUE)
# "all_exons_192549572"
# Load sample RDS file
rdsfile <- readRDS(file.path(rdsDir, paste0("all_exons_", params$sample, ".RDS")))
# CNVcalls from rdsfile
samplecnv <- rdsfile@CNV.calls
# Subset panelannotated to genes in panell
panelannotated <- subset(annotatedFile, annotatedFile$panell == params$panell)
# When a CNV is found
if(nrow(samplecnv) > 0){
# Sort columns to adapt to bedfile
samplecnv <- samplecnv[, c(7,5,6,3,4,8:12)]
# Eliminate chr
samplecnv$chromosome <- str_remove(samplecnv$chromosome, "chr")
# Give ID to CNV
samplecnv$cnvID <- 1:nrow(samplecnv)
# Write for bedtools
write.table(samplecnv, file.path(tempDir, "samplecnv.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Write for bedtools
write.table(panelannotated, file.path(tempDir, "panelannotated.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Intersect ROIs of interest (panelannotated) with CNV found in sample
system(paste("bedtools intersect -wao -a", file.path(tempDir, "panelannotated.bed"), "-b", file.path(tempDir, "samplecnv.bed"), ">", file.path(tempDir, "cnv.bed")))
# Load result
cnvbed <- read.table(file.path(tempDir, "cnv.bed"), sep = "\t", stringsAsFactors = FALSE)
# Change colnames
colnames(cnvbed) <- c(names(panelannotated), names(samplecnv), "overlap")
names(cnvbed)[c(16, 17, 18)] <- c("chr_org", "start_org", "end_org")
# Specify normal when no overlap is found
cnvbed$type[which(cnvbed$overlap == 0)] <- "normal"
cnvbed$BF[which(cnvbed$overlap == 0)] <- ""
cnvbed$type <- factor(cnvbed$type, levels = c("deletion", "normal","duplication"))
}
# When no CNV is found
if(nrow(samplecnv) == 0){
cnvbed <- panelannotated
cnvbed$chr_org <- "."
cnvbed$start_org <- -1
cnvbed$end_org <- -1
cnvbed$type <- "normal"
cnvbed$nexons <- "."
cnvbed$id <- "."
cnvbed$BF <- "."
cnvbed$reads.expected <- "."
cnvbed$reads.observed <- "."
cnvbed$reads.ratio <- "."
cnvbed$cnvID <- "."
cnvbed$overlap <- 0
}
# Calculate reads.ratio for non CNV ROIs
cnvreads <- data.frame(cbind(rdsfile@annotations, calculated.test = rdsfile@test, calculated.reference = rdsfile@reference, calculated.factor = rdsfile@expected))
cnvreads$calculated.expected <- round((cnvreads$calculated.test + cnvreads$calculated.reference) * cnvreads$calculated.factor, 0)
cnvreads <- cnvreads[, c(2,4,5,8)]
names(cnvreads)[1] <- "chr"
cnvreads$chr <- str_remove(cnvreads$chr, "chr")
# merge cnv with read information
cnvbed <- merge(x=cnvbed, y=cnvreads, by = c("chr", "end"), all.x = TRUE)
# Fusion rank function
fusion_ranks <- function(dataframe){
Gene <- unique(dataframe$Gene)
NM <- unique(dataframe$NM)
Chr <- unique(dataframe$Chr)
Start <- min(dataframe$Start)
End <- max(dataframe$End)
Size <- End - Start
Strand <- if(unique(dataframe$Strand) == -1){"-"} else if(unique(dataframe$Strand) == 1) {"+"}
Exons <- paste(sort(dataframe$Exons), collapse = ", ")
Type <- as.character(unique(dataframe$Type))
BF <- unique(dataframe$BF)
if(all(dataframe$Observed != 0 & dataframe$Expected != 0)){
Reads.ratio <- round(sum(dataframe$Observed) / sum(dataframe$Expected), 3)
Observed <- sum(dataframe$Observed)
Expected <- sum(dataframe$Expected)
outputDataframe <- cbind(Gene, NM, Chr, Start, End, Size, Strand, Exons, Type, BF, Observed, Expected, Reads.ratio)
} else {
Observed <- sum(dataframe$Observed)
Expected <- sum(dataframe$Expected)
outputDataframe <- cbind(Gene, NM, Chr, Start, End, Size, Strand, Exons, Observed, Expected)
}
return(outputDataframe)
}
# Create dataframe for datatable
resultTable <- data.frame()
nonconveredTable <- data.frame()
# Create table for output
for(nmsample in unique(cnvbed$nm)){
nmbed <- subset(cnvbed, nm == nmsample)
# Select columns
nmbed <- nmbed[, c(4, 6, 1, 3, 2, 11, 7, 8, 19, 22, 28, 29, 26)]
colnames(nmbed) <- c("Gene", "NM", "Chr", "Start", "End",  "Size", "Strand","Exons", "Type", "BF", "Observed", "Expected", "cnvID")
# Extract exons with 0 expected or 0 reads
a <- which(nmbed$Observed == 0 | nmbed$Expected == 0)
nonconvered <- nmbed[a, ]
# delete this rows from nmbed
if(length(a) > 0){
nmbed <- nmbed[-a, ]
}
# Fusion rows by cnv type
## Non-convered ranks
if(nrow(nonconvered) > 0){
noncovered_fusion <- fusion_ranks(nonconvered)
nonconveredTable <- rbind(nonconveredTable, noncovered_fusion)
}
## normal ranks
normal_ranks <- subset(nmbed, Type == "normal")
normal_fusion <- data.frame()
if(nrow(normal_ranks) > 0){
normal_fusion <- fusion_ranks(normal_ranks)
}
## deletion ranks
deletion_ranks <- subset(nmbed, Type == "deletion")
deletion_fusion <- data.frame()
if(nrow(deletion_ranks) > 0){
for(i in unique(deletion_ranks$cnvID)){
deletion_subset <- subset(deletion_ranks, cnvID == i)
deletion_subset <- fusion_ranks(deletion_subset)
deletion_fusion <- rbind(deletion_fusion, deletion_subset)
}
}
## duplication ranks
duplication_ranks <- subset(nmbed, Type == "duplication")
duplication_fusion <- data.frame()
if(nrow(duplication_ranks) > 0){
for(i in unique(duplication_ranks$cnvID)){
duplication_subset <- subset(duplication_ranks, cnvID == i)
duplication_subset <- fusion_ranks(duplication_subset)
duplication_fusion <- rbind(duplication_fusion, duplication_subset)
}
}
resultTable <- rbind(resultTable, normal_fusion, deletion_fusion, duplication_fusion)
}
resultTable <- rbind(resultTable, normal_fusion, deletion_fusion, duplication_fusion)
}
resultTable <- resultTable[order(resultTable$BF, -rank(resultTable$Gene), decreasing = TRUE), ]
resultTable %>%
datatable(extensions = "Buttons",
options = list(dom = "Blfrtip",
buttons = c("csv", "excel", "pdf")),
rownames=FALSE)
if(nrow(nonconveredTable) > 0){
nonconveredTable <- nonconveredTable[order(nonconveredTable$Gene), ]
}
nonconveredTable %>%
datatable(extensions = "Buttons",
options = list(dom = "Blfrtip",
buttons = c("csv", "excel", "pdf")),
rownames=FALSE)
# Add new type
cnvbed$type <- factor(cnvbed$type, levels = c("deletion", "normal","duplication", "noncovered"))
cnvbed$type[which(cnvbed$calculated.test == 0 | cnvbed$calculated.expected == 0)] <- "noncovered"
cnvplot <- cnvbed[, c("newstart", "newend", "gene", "nm", "type", "rank")]
cnvplot$name <- paste0(cnvplot$gene, "\n (", cnvplot$nm, ")")
# Fix colors when missing levels
colors <- brewer.pal(n = 4, name = "Set3")
scale_fill_genes <- function(...){
ggplot2:::manual_scale(
'fill',
values = setNames(colors, c("deletion", "normal","duplication", "noncovered")),
...
)
}
p <- ggplot(cnvplot, aes(xmin = newstart, xmax = newend, y = name, fill = type, label = rank)) +
geom_gene_arrow(arrowhead_height = unit(4, "mm"),arrow_body_height = unit(4, "mm"), arrowhead_width = unit(0.2, "mm")) +
geom_gene_label(align = "left") +
facet_wrap(~ name, scales = "free", ncol = 1) +
scale_fill_genes() +
theme_genes() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank())
p
## Obtain coordinates for all genes of interest
gene_coord <- panelannotated %>% dplyr::select(chr, start, end, gene, nm) %>% group_by(gene) %>% mutate(genestart = min(start), geneend = max(end)) %>% dplyr::select(gene, chr, genestart, geneend, nm) %>% unique()
# Add chr to chromosome column (need for graph)
gene_coord$chr <- paste0("chr", gene_coord$chr)
View(gene_coord)
# Export imatges to TIFF
for(i in 1:nrow(gene_coord)){
tiff(file.path(graphsDir, paste0(params$sample, as.character(gene_coord[i, 1]), ".tiff")), units="in", width=6, height=5, res=150)
plot(rdsfile, sequence = factor(gene_coord[i, 2], levels = levels(rdsfile@annotations$chromosome)), xlim = c(as.numeric(gene_coord[i, 3]) - 100, as.numeric(gene_coord[i, 4]) + 100), count.threshold = 20, main = paste0(gene_coord[i, 1], " gene ", "(", gene_coord[i, 5], ")"), cex.lab = 0.8, with.gene = TRUE)
dev.off()
}
# Load imatges
graphs <- list.files(graphsDir, as.character(params$sample))
View(gene_coord)
plot(rdsfile, sequence = factor(gene_coord[i, 2], levels = levels(rdsfile@annotations$chromosome)), xlim = c(as.numeric(gene_coord[i, 3]) - 100, as.numeric(gene_coord[i, 4]) + 100), count.threshold = 20, main = paste0(gene_coord[i, 1], " gene ", "(", gene_coord[i, 5], ")"), cex.lab = 0.8, with.gene = TRUE)
