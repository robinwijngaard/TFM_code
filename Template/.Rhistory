write.table(panelannotated, file.path(reportDir, "panelannotated.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
system("bedtools intersect -wao -a panelannotated.bed -b samplecnv.bed > cnv.bed")
cnvbed <- read.table("cnv.bed", sep = "\t", stringsAsFactors = FALSE)
cnvFounds_exomedepth <- read.delim("cnvFounds_exomedepth.txt")[]
View(cnvFounds_exomedepth)
cnvFounds_exomedepth <- read.delim("cnvFounds_exomedepth.txt")[, c(7,5,6,3,13,14,9,12)]
View(cnvFounds_exomedepth)
cnvFounds_exomedepth$sample <- sub("X", "", cnvFounds_exomedepth$sample)
cnvFounds_exomedepth$sample <- as.character(cnvFounds_exomedepth$sample)
annotatedFile <- read.delim(file.path(reportDir, "annotatedFile.bed"), sep="\t", header = TRUE)
samplesData <- read.delim("~/Dropbox/Master UOC/TFM/Report/samples.txt", header=FALSE)
cnvFounds_exomedepth <- read.delim("cnvFounds_exomedepth.txt")[, c(7,5,6,3,13,14,9,12)]
cnvNames <- colnames(cnvFounds_exomedepth)
cnvFounds_exomedepth$sample <- sub("X", "", cnvFounds_exomedepth$sample)
cnvFounds_exomedepth$sample <- as.character(cnvFounds_exomedepth$sample)
annotatedFile <- read.delim(file.path(reportDir, "annotatedFile.bed"), sep="\t", header = TRUE)
samplesData <- read.delim("~/Dropbox/Master UOC/TFM/Report/samples.txt", header=FALSE)
for (i in 1:nrow(samplesData)){
render("reportmrkdown.Rmd", output_format = "html_document", params = list(sample = samplesData$V1[i], panell = samplesData$V2[i]), output_file = file.path(reportDir, paste0(samplesData$V1[i],"report.html")))
}
View(cnvbed)
View(panelannotated)
View(samplecnv)
colnames(cnvbed) <- c(names(panelannotated, samplecnv))
colnames(cnvbed) <- c(names(panelannotated), names(samplecnv)))
colnames(cnvbed) <- c(names(panelannotated), names(samplecnv))
View(cnvbed)
colnames(cnvbed) <- c(names(panelannotated), names(samplecnv), "overlap")
View(cnvbed)
View(cnvbed)
install.packages("DT")
library(DT)
cnvbed$reads.ratio[which(cnvbed$overlap == 0)] <- 1
View(cnvbed)
samplecnv <- substet(cnvbed, cnvbed$type != "normal")
samplecnv <- subset(cnvbed, cnvbed$type != "normal")
View(panelannotated)
samplepos <- subset(cnvbed, cnvbed$type != "normal")
View(samplepos)
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
View(samplepos)
cnvbed$type[which(cnvbed$overlap == 0)] <- "normal"
cnvbed$type <- factor(cnvbed$cnv, levels = c( "deletion", "normal","duplication"))
cnvbed$reads.ratio[which(cnvbed$overlap == 0)] <- 1
cnvbed$type[which(cnvbed$overlap == 0)] <- "normal"
cnvbed$type <- factor(cnvbed$type, levels = c( "deletion", "normal","duplication"))
cnvbed$reads.ratio[which(cnvbed$overlap == 0)] <- 1
samplepos <- subset(cnvbed, cnvbed$type != "normal")
newsamplepos <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
colnames(newsamplepos) <- newnames
View(newsamplepos)
posgenes <- unique(samplepos$Gene)
posNM <- unique(samplepos$nm)
min(samplepos$start)
min(samplepos$start, samplepos$end)
View(samplepos)
View(newsamplepos)
newsample <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
colnames(newsample) <- newnames
samplepos <- subset(cnvbed, cnvbed$type == "deletion")
for (type in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == type)
sampleNM <- unique(sampletype$nm)
for(nm in sampleNM){
dfNM <- subset(samplepos, samplepos$nm == nm)
newsample$Gene <- unique(dfNM$gene)
newsample$NM <- nm
newsample$Chr <- unique(dfNM$chr)
newsample$Start <- min(dfNM$start, dfNM$end)
newsample$End <- max(dfNM$start, dfNM$end)
newsample$Size <- newsamplepos$End - newsamplepos$Start
newsample$Exons <- paste(min(dfNM$rank), ",", max(dfNM$rank))
newsample$Type <- type
newsample$BF <- mean(dfNM$BF)
newsample$odds <- mean(dfNM$odds)
}
}
View(sampletype)
View(sampletype)
sampletype <- subset(cnvbed, cnvbed$type == type)
type
subset(cnvbed, cnvbed$type == type)
View(cnvbed)
subset(cnvbed, cnvbed$type == "deletion")
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(nm in sampleNM){
dfNM <- subset(samplepos, samplepos$nm == nm)
newsample$Gene <- unique(dfNM$gene)
newsample$NM <- nm
newsample$Chr <- unique(dfNM$chr)
newsample$Start <- min(dfNM$start, dfNM$end)
newsample$End <- max(dfNM$start, dfNM$end)
newsample$Size <- newsamplepos$End - newsamplepos$Start
newsample$Exons <- paste(min(dfNM$rank), ",", max(dfNM$rank))
newsample$Type <- cnvtype
newsample$BF <- mean(dfNM$BF)
newsample$odds <- mean(dfNM$odds)
}
}
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
View(sampletype)
sampleNM <- unique(sampletype$nm)
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(nm in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == nm)
newsample$Gene <- unique(dfNM$gene)
newsample$NM <- nm
newsample$Chr <- unique(dfNM$chr)
newsample$Start <- min(dfNM$start, dfNM$end)
newsample$End <- max(dfNM$start, dfNM$end)
newsample$Size <- newsamplepos$End - newsamplepos$Start
newsample$Exons <- paste(min(dfNM$rank), ",", max(dfNM$rank))
newsample$Type <- cnvtype
newsample$BF <- mean(dfNM$BF)
newsample$odds <- mean(dfNM$odds)
}
}
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(nm in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == nm)
newsample$Gene <- c(newsample$Gene, unique(dfNM$gene))
newsample$NM <- c(newsample$NM, nm)
newsample$Chr <- c(newsample$Chr, unique(dfNM$chr))
newsample$Start <- c(newsample$Start, min(dfNM$start, dfNM$end))
newsample$End <- c(newsample$End, max(dfNM$start, dfNM$end))
newsample$Size <- c(newsample$Size, newsamplepos$End - newsamplepos$Start)
newsample$Exons <- c(newsample$Exons, paste(min(dfNM$rank), ",", max(dfNM$rank)))
newsample$Type <- c(newsample$Type, cnvtype)
newsample$BF <- c(newsample$BF, mean(dfNM$BF))
newsample$odds <- c(newsample$odds, mean(dfNM$odds))
}
}
View(dfNM)
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(NM in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == NM)
newsample$Gene <- c(newsample$Gene, unique(dfNM$gene))
newsample$NM <- c(newsample$NM, nm)
newsample$Chr <- c(newsample$Chr, unique(dfNM$chr))
newsample$Start <- c(newsample$Start, min(dfNM$start, dfNM$end))
newsample$End <- c(newsample$End, max(dfNM$start, dfNM$end))
newsample$Size <- c(newsample$Size, newsamplepos$End - newsamplepos$Start)
newsample$Exons <- c(newsample$Exons, paste(min(dfNM$rank), ",", max(dfNM$rank)))
newsample$Type <- c(newsample$Type, cnvtype)
newsample$BF <- c(newsample$BF, mean(dfNM$BF))
newsample$odds <- c(newsample$odds, mean(dfNM$odds))
}
}
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(nm in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == nm)
Gene <- unique(dfNM$gene)
NM <- nm
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), ",", max(dfNM$rank))
Type <- cnvtype
BF <- mean(dfNM$BF)
odds <- mean(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == i)
Gene <- unique(dfNM$gene)
NM <- nm
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), ",", max(dfNM$rank))
Type <- cnvtype
BF <- mean(dfNM$BF)
odds <- mean(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
View(newsample)
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == i)
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- mean(dfNM$BF)
odds <- mean(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
dfNM <- subset(sampletype, samplepos$nm == i)
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- mean(dfNM$BF)
View(cnvbed)
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == i)
if(nrow(dfNM > 1)){
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- unique(dfNM$BF)
odds <- mean(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
} else if(nrow(dfNM == 1)){
Gene <- dfNM$gene
NM <- i
Chr <- dfNM$chr
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- dfNM$rank
Type <- cnvtype
BF <- dfNM$BF
odds <- dfNM$odds
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
}
newsample <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
colnames(newsample) <- newnames
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == i)
if(nrow(dfNM > 1)){
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- unique(dfNM$BF)
odds <- mean(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
} else if(nrow(dfNM == 1)){
Gene <- dfNM$gene
NM <- i
Chr <- dfNM$chr
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- dfNM$rank
Type <- cnvtype
BF <- dfNM$BF
odds <- dfNM$odds
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
}
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == i)
if(nrow(dfNM) > 1){
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- unique(dfNM$BF)
odds <- mean(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
} else if(nrow(dfNM) == 1){
Gene <- dfNM$gene
NM <- i
Chr <- dfNM$chr
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- dfNM$rank
Type <- cnvtype
BF <- dfNM$BF
odds <- dfNM$odds
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
}
View(newsample)
newsample <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
colnames(newsample) <- newnames
newsample <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
colnames(newsample) <- newnames
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, samplepos$nm == i)
if(nrow(dfNM) > 1){
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- unique(dfNM$BF)
odds <- unique(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
} else if(nrow(dfNM) == 1){
Gene <- dfNM$gene
NM <- i
Chr <- dfNM$chr
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- dfNM$rank
Type <- cnvtype
BF <- dfNM$BF
odds <- dfNM$odds
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
}
View(newsample)
cnvtype <- "normal"
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
View(sampletype)
sampleNM <- unique(sampletype$nm)
i <- sampleNM[1]
Gene <- unique(dfNM$gene)
dfNM <- subset(sampletype, samplepos$nm == i)
View(dfNM)
View(samplepos)
newsample <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "odds")
colnames(newsample) <- newnames
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, sampletype$nm == i)
if(nrow(dfNM) > 1){
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- unique(dfNM$BF)
odds <- unique(dfNM$odds)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
} else if(nrow(dfNM) == 1){
Gene <- dfNM$gene
NM <- i
Chr <- dfNM$chr
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- newsamplepos$End - newsamplepos$Start
Exons <- dfNM$rank
Type <- cnvtype
BF <- dfNM$BF
odds <- dfNM$odds
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, odds)
newsample <- rbind(newsample, newline)
}
}
}
View(sampletype)
View(samplecnv)
newsample <- data.frame(matrix(ncol = 10, nrow = 0))
newnames <- c("Gene", "NM", "Chr", "Start", "End", "Size", "Exons", "Type", "BF", "read.ratio")
colnames(newsample) <- newnames
for (cnvtype in levels(cnvbed$type)){
sampletype <- subset(cnvbed, cnvbed$type == cnvtype)
sampleNM <- unique(sampletype$nm)
for(i in sampleNM){
dfNM <- subset(sampletype, sampletype$nm == i)
if(nrow(dfNM) > 1){
Gene <- unique(dfNM$gene)
NM <- i
Chr <- unique(dfNM$chr)
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- End - Start
Exons <- paste(min(dfNM$rank), "-", max(dfNM$rank))
Type <- cnvtype
BF <- unique(dfNM$BF)
ratio <- unique(dfNM$reads.ratio)
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, ratio)
newsample <- rbind(newsample, newline)
} else if(nrow(dfNM) == 1){
Gene <- dfNM$gene
NM <- i
Chr <- dfNM$chr
Start <- min(dfNM$start, dfNM$end)
End <- max(dfNM$start, dfNM$end)
Size <- End - Start
Exons <- dfNM$rank
Type <- cnvtype
BF <- dfNM$BF
ratio <- dfNM$reads.ratio
newline <- c(Gene, NM, Chr, Start, End, Size, Exons, Type, BF, ratio)
newsample <- rbind(newsample, newline)
}
}
}
View(sampletype)
View(samplesData)
View(samplepos)
View(newsample)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
p <- ggplot(cnvbed, aes(xmin = newstart, xmax = newend, y = gene, fill = cnv, label = rank)) +
geom_gene_arrow(arrowhead_height = unit(3, "mm"), arrowhead_width = unit(0.2, "mm")) +
geom_gene_label(align = "left") +
facet_wrap(~ gene, scales = "free", ncol = 1) +
scale_fill_brewer(palette = "Set3") +
theme_genes() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
View(cnvbed)
View(cnvbed)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
source('~/Dropbox/Master UOC/TFM/Report/annotate.R', echo=TRUE)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
View(cnvbed)
View(cnvbed)
View(cnvbed)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
cnvbed
is.na(cnvbed$newstart)
is.na(cnvbed$newstart)
is.na(cnvbed$newend)
is.na(cnvbed$gene)
is.na(cnvbed$type)
is.na(cnvbed$rank)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
p <- ggplot(cnvbed, aes(xmin = newstart, xmax = newend, y = gene, fill = type, label = "")) +
geom_gene_arrow(arrowhead_height = unit(4, "mm"),arrow_body_height = unit(4, "mm"), arrowhead_width = unit(0.2, "mm")) +
geom_gene_label(align = "left") +
facet_wrap(~ gene, scales = "free", ncol = 1) +
scale_fill_brewer(palette = "Set3") +
theme_genes() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
View(cnvbed)
source('~/Dropbox/Master UOC/TFM/Report/report.R', echo=TRUE)
View(endocriFile)
View(cnvbed)
