BiocManager::install("GenomicRanges")
BiocManager::install("GenomicAlignments")
BiocManager::install("Rsamtools")
install.packages("Rsamtools")
outputFolder <- "/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR/output/manta2-datasetall"
svTools <- ""/home/robin/Documents/Project/TFM_code/tools/Files/svtools-master""
svTools <- /home/robin/Documents/Project/TFM_code/tools/Files/svtools-master"
svTools <- "/home/robin/Documents/Project/TFM_code/tools/Files/svtools-master"
bamsDir <- "/home/robin/Documents/Project/Samples/bam/all"
# List bam files
bamFiles <- list.files(bamsDir)
# List bam files
bamFiles <- list.files(bamsDir)
# List bam files
bamFiles <- list.files(bamsDir)
# List bam files
bamFiles <- list.files(bamsDir)
bamFiles <- bamFiles[!grepl(".bai", bamFiles)]
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
i <- 1
#Create subsetFolder
sampleName <- sub(".bam", "", bamFiles[i])
subsetFolder <- file.path(outputFolder, paste0("results", sampleName))
# Prepare bamFile
bamFile <- paste0("--bam=", file.path(bamsDir, bamFiles[i]))
# Decompress result VCF file
resultFolder <- file.path(subsetFolder, "results", "variants")
#cnvfound file
cnvFounds2 <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(cnvFounds2) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
system(paste("gzip -d", file.path(resultFolder, "candidateSV.vcf.gz")))
system(paste("python", file.path(svTools, "vcfToBedpe"), "-i",file.path(resultFolder, "candidateSV.vcf"), ">", file.path(resultFolder, "diploidSV.bedpe")))
system(paste("python", file.path(svTools, "vcfToBedpe"), "-i",file.path(resultFolder, "candidateSV.vcf"), ">", file.path(resultFolder, "candidateSV.bedpe")))
# Read bed Result File
resultFile2 <- file.path(resultFolder, "candidateSV.bedpe")
# Read bed Result File
resultFile2 <- file.path(resultFolder, "candidateSV.bedpe")
resultData <- read.table(resultFile2, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
View(resultData)
# Only DUP and DEL and filter useless columns
resultData <- subset(resultData, resultData$TYPE == "DUP" | resultData$TYPE == "DEL")
resultData <- resultData[, c(1, 2, 5, 11, 12, 15)]
View(resultData)
