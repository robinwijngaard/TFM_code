combinedFile="/home/robin/Documents/Project/Files/ICR96/results/combinedData.txt"
inhouseFile=/"home/robin/Documents/Project/Files/Clinic/results/combinedData.txt"
inhouseFile="/home/robin/Documents/Project/Files/Clinic/results/combinedData.txt"
# Load result file
combinedData <- read.table(combinedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)[, -c(14, 16)]
# Obtain GC content
ranges <- cbind(combinedData[, 1:3], rep(".", nrow(combinedData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges$chr <- paste0("chr", ranges$chr)
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
library(caret)
library(regioneR)
library(BSgenome.Hsapiens.UCSC.hg38)
library(R.utils)
# Obtain GC content
ranges <- cbind(combinedData[, 1:3], rep(".", nrow(combinedData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges$chr <- paste0("chr", ranges$chr)
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
library(GenomicRanges)
# Files
combinedFile="/home/robin/Documents/Project/Files/ICR96/results/combinedData.txt"
inhouseFile="/home/robin/Documents/Project/Files/Clinic/results/combinedData.txt"
# Load result file
combinedData <- read.table(combinedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)[, -c(14, 16)]
# Obtain GC content
ranges <- cbind(combinedData[, 1:3], rep(".", nrow(combinedData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges$chr <- paste0("chr", ranges$chr)
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
library(regioneR)
BiocManager::install("toGRanges")
library(caret)
library(regioneR)
library(BSgenome.Hsapiens.UCSC.hg38)
library(R.utils)
library(GenomicRanges)
BiocManager::install("regioneR")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(caret)
library(regioneR)
library(BSgenome.Hsapiens.UCSC.hg38)
library(R.utils)
library(GenomicRanges)
# Files
combinedFile="/home/robin/Documents/Project/Files/ICR96/results/combinedData.txt"
inhouseFile="/home/robin/Documents/Project/Files/Clinic/results/combinedData.txt"
# Load result file
combinedData <- read.table(combinedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)[, -c(14, 16)]
# Obtain GC content
ranges <- cbind(combinedData[, 1:3], rep(".", nrow(combinedData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges$chr <- paste0("chr", ranges$chr)
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
gc <- (freqs[,'C'] + freqs[,'G'])/rowSums(freqs)
combinedData$gc <- gc
# Transform data to numeric levels (0: normal, 1:dup, 2: del)
modelData <- combinedData[, c(7,10,12:16)]
modelData$cnvkit5[modelData$cnvkit5 == -1] <- 2
modelData$panelcn[modelData$panelcn == -1] <- 2
modelData$exomedepth[modelData$exomedepth == -1] <- 2
modelData$convading[modelData$convading == -1] <- 2
modelData$cnv <- as.factor(modelData$cnv)
# Separate in train and test set
set.seed(123)
s <- createDataPartition(y = modelData$cnv, p = 0.67, list = FALSE)
train.data <- modelData[s, ]
test.data <- modelData[-s, ]
# Set ctrl: 10-fold CV
ctrl <- trainControl(classProbs = TRUE, method = "cv", number =  10, summaryFunction = twoClassSummary)
## train
ann.mdl <- train(cnv ~ ., data = train.data, method = "nnet", trControl = ctrl, tuneLength = 4,
preProc = c("range"),trace = FALSE, metric = "Sens", maximize = TRUE)
## show evaluated models
ann.mdl
## evaluate test data
ann.pred <- predict(ann.mdl, newdata = test.data[, -1])
ann.cm <- confusionMatrix(ann.pred, test.data$cnv)
ann.cm <- confusionMatrix(ann.pred, test.data$cnv)
ann.cm
install.packages("e1071")
library(e1071)
## evaluate test data
ann.pred <- predict(ann.mdl, newdata = test.data[, -1])
ann.cm <- confusionMatrix(ann.pred, test.data$cnv)
ann.cm
## train
rf.mdl <- train(cnv ~ ., data = train.data, method = "rf",  trControl = ctrl, tuneLength = 4,
trace = FALSE, preProcess = c("center", "scale"), metric = "Sens", maximize = TRUE)
## train
rf.mdl <- train(cnv ~ ., data = train.data, method = "rf",  trControl = ctrl, tuneLength = 4,
trace = FALSE, preProcess = c("center", "scale"), metric = "Sens", maximize = TRUE)
## show evaluated models
rf.mdl
## evaluate test data
rf.pred <- predict(rf.mdl, newdata = test.data[, -1])
rf.cm <- confusionMatrix(rf.pred, test.data$cnv)
rf.cm
## train
grid <- expand.grid(.adjust = 1,
.usekernel = c(FALSE, TRUE),
.laplace = c(0, 1))
nb.mdl <- train(cnv ~ ., data = train.data, method = "naive_bayes", trControl = ctrl, tuneGrid = grid,
metric = "Sens", maximize = TRUE)
## show evaluated models
nb.mdl
## evaluate test data
nb.pred <- predict(nb.mdl, newdata = test.data[, -1])
nb.cm <- confusionMatrix(nb.pred, test.data$cnv)
nb.cm
# Model 4: SVM radial
svmR.mdl <- train(cnv ~ ., data = train.data, method = "svmRadial", trControl = ctrl, tuneLength = 4,
preProc = c("center", "scale"), trace = FALSE, metric = "Sens", maximize = TRUE)
# Model 4: SVM radial
svmR.mdl <- train(cnv ~ ., data = train.data, method = "svmRadial", trControl = ctrl, tuneLength = 4,
preProc = c("center", "scale"), trace = FALSE, metric = "Sens", maximize = TRUE)
## show evaluated models
svmR.mdl
## evaluate test data
svm.pred <- predict(svmR.mdl, newdata = test.data[, -1])
svm.cm <- confusionMatrix(svm.pred, test.data$cnv)
inhouseData <- read.table(inhouseFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
svm.cm
View(inhouseData)
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges$chr <- paste0("chr", ranges$chr)
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
View(rf.cm)
View(ranges)
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges$chr <- paste0("chr", ranges$chr)
View(ranges)
inhouseData <- read.table(inhouseFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
# Load result file
combinedData <- read.table(combinedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)[, -c(14, 16)]
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
gc <- (freqs[,'C'] + freqs[,'G'])/rowSums(freqs)
inhouseData$gc <- gc
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges <- ranges[!grepl("chrCHR", ranges$chr),]
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
ranges <- ranges[!grepl("chrCHR", ranges$chr),]
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
gc <- (freqs[,'C'] + freqs[,'G'])/rowSums(freqs)
inhouseData$gc <- gc
inhouseData <- read.table(inhouseFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
inhouseData <- inhouseData[!grepl("chrCHR", inhouseData$chr),]
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
gc <- (freqs[,'C'] + freqs[,'G'])/rowSums(freqs)
inhouseData$gc <- gc
# transform del to 2
inhouseData$cnvkit5[modelData$cnvkit5 == -1] <- 2
inhouseData$panelcn[modelData$panelcn == -1] <- 2
inhouseData <- read.table(inhouseFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
inhouseData <- inhouseData[!grepl("chrCHR", inhouseData$chr),]
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
gc <- (freqs[,'C'] + freqs[,'G'])/rowSums(freqs)
inhouseData$gc <- gc
# transform del to 2
inhouseData$cnvkit5[inhouseData$cnvkit5 == -1] <- 2
inhouseData$panelcn[inhouseData$panelcn == -1] <- 2
inhouseData$exomedepth[inhouseData$exomedepth == -1] <- 2
inhouseData$convading[inhouseData$convading == -1] <- 2
inhouseData$cnv <- as.factor(inhouseData$cnv)
# transform del to 2
colnames(inhouseData)["cnvkit"] <- "cnvkit5"
# select model rows
inhouseData <- inhouseData[, c(7,10,12:16)]
View(modelData)
# transform del to 2
colnames(inhouseData)[3] <- "cnvkit5"
inhouseData$cnvkit5[inhouseData$cnvkit5 == -1] <- 2
inhouseData$panelcn[inhouseData$panelcn == -1] <- 2
inhouseData$exomedepth[inhouseData$exomedepth == -1] <- 2
inhouseData$convading[inhouseData$convading == -1] <- 2
inhouseData$cnv <- as.factor(inhouseData$cnv)
inhouseData <- read.table(inhouseFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
inhouseData <- inhouseData[!grepl("chrCHR", inhouseData$chr),]
# Obtain GC content
ranges <- cbind(inhouseData[, 1:3], rep(".", nrow(inhouseData)))
colnames(ranges) <- c("chr", "start", "end", "strand")
#Build a GRanges from your matrix
ranges <- toGRanges(data.frame(ranges))
#Get the sequences and compute the GC content
freqs <- alphabetFrequency(getSeq(BSgenome.Hsapiens.UCSC.hg38, ranges))
gc <- (freqs[,'C'] + freqs[,'G'])/rowSums(freqs)
inhouseData$gc <- gc
# select model rows
inhouseData <- inhouseData[, c(7,10,12:16)]
# transform del to 2
colnames(inhouseData)[3] <- "cnvkit5"
inhouseData$cnvkit5[inhouseData$cnvkit5 == -1] <- 2
inhouseData$panelcn[inhouseData$panelcn == -1] <- 2
inhouseData$exomedepth[inhouseData$exomedepth == -1] <- 2
inhouseData$convading[inhouseData$convading == -1] <- 2
inhouseData$cnv <- as.factor(inhouseData$cnv)
# predict models on data
ann.pred <- predict(ann.mdl, newdata = inhouseData[, -1])
ann.cm <- confusionMatrix(ann.pred, inhouseData$cnv)
ann.cm
rf.pred <- predict(rf.mdl, newdata = inhouseData[, -1])
rf.cm <- confusionMatrix(rf.pred, inhouseData$cnv)
rf.cm
nb.pred <- predict(nb.mdl, newdata = inhouseData[, -1])
nb.cm <- confusionMatrix(nb.pred, inhouseData$cnv)
nb.cm
svm.pred <- predict(svmR.mdl, newdata = inhouseData[, -1])
svm.cm <- confusionMatrix(svm.pred, inhouseData$cnv)
svm.cm
