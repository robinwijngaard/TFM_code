outputFolder <- "/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/manta-datasetall"
# Decompress result VCF file
resultFolder <- file.path(outputFolder, "results", "variants")
system(paste("gzip -d", file.path(resultFolder, "diploidSV.vcf.gz")))
# Transform VCF to bed
system(paste("vcf2bed <", file.path(resultFolder, "diploidSV.vcf"), "> diploidSV.bed" ))
# Transform VCF to bed
system(paste("vcf2bed <", file.path(resultFolder, "diploidSV.vcf"), ">",file.path(resultFolder, "diploidSV.bed")))
# Read bed Result File
resultFile <- file.path(resultFolder, "diploidSV.bed")
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE)
View(resultData)
svTools <- "/home/robin/Documents/Project/TFM_code/Files/svtools-master"
# Transform VCF to bed
system(paste("python", file.path(svTools, "vcfToBedpe"), "-i",file.path(resultFolder, "diploidSV.vcf"), ">", file.path(resultFolder, "diploidSV.bedpe")))
# Read bed Result File
resultFile <- file.path(resultFolder, "diploidSV.bedpe")
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE)
View(resultData)
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, header = TRUE)
View(resultData)
readLines(file.path(resultFolder, "diploidSV.bedpe"), n=1)
header <- readLines(file.path(resultFolder, "diploidSV.bedpe"), n=1, sep="\t")
header <- readLines(file.path(resultFolder, "diploidSV.bedpe"), n=1)
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
View(resultData)
grep("BND", resultData$ID)
resultData <- resultData[-BNDlines, ]
# Filter BND
BNDlines <- grep("BND", resultData$ID)
resultData <- resultData[-BNDlines, ]
View(resultData)
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
BNDdata <- resultData[BNDlines, ]
resultData <- resultData[-BNDlines, ]
View(BNDdata)
View(resultData)
grepl("DEL", resultData)
# Filter BND
BNDlines <- grep("BND", resultData$TYPE)
# Filter BND
resultData <- subset(resultData, resultData$TYPE != "BND")
ncols <- ncol(resultData)
resultData <- resultData[, c(1, 2, 5, 11, 12, 15:ncols)]
View(resultData)
# Add 1 to start.A and start.B
resultData$START_A <- resultData$START_A + 1
resultData$START_B <- resultData$START_B + 1
View(resultData)
bamsDir <- ""/home/robin/Documents/Project/Samples/bam/all""
bamsDir <- "/home/robin/Documents/Project/Samples/bam/all"
# extract fields
bamsDir <- file.path(dataset$bams_dir)
# List bam files
bamFiles <- list.files(bamsDir)
bamFiles <- bamFiles[!grepl(".bai", bamFiles)]
bamList <- c()
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
#
for (sample in sampleNames){
sampleData <- resultData[, 1:5, sample]
}
#
for (sample in sampleNames){
sampleData <- resultData[, 1:5, sample]
}
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5, sample)]
}
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
}
View(sampleData)
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample = sample])
}
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- data.frame(sampleData, resultData[, sample = sample])
}
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
}
View(sampleData)
# Filter BND and useless columns
resultData <- subset(resultData, resultData$TYPE == "DUP" | resultData$TYPE == "DEL")
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
# Filter BND and useless columns
resultData <- subset(resultData, resultData$TYPE == "DUP" | resultData$TYPE == "DEL")
ncols <- ncol(resultData)
resultData <- resultData[, c(1, 2, 5, 11, 12, 15:ncols)]
# Add 1 to start.A and start.B
resultData$START_A <- resultData$START_A + 1
resultData$START_B <- resultData$START_B + 1
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
}
#
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
}
View(sampleData)
# Add lines to CNVfound
sampleID <- rep(sample, nrow(failedcall))
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- rbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -"Filter"]
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -5]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- rbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -5]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvSample, cnvCall)
}
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- rbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -5]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvSample, cnvSample)
}
View(cnvFounds)
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- rbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -5]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
View(cnvFounds)
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- rbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -5]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -5]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -6]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Delete Filter column and rename colnames
cnvSample <- cnvSample[, -6]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
View(resultData)
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Rename colnames
cnvSample <- cnvSample[, -6]
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Rename colnames
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
View(cnvFounds)
# Convert CNVtype
cnvFounds$CNV.type <- lapply(cnvFounds$CNV.type, function(x) sapply(x, auxCNname))
# Convert to deletion, duplication
auxConvert <- function(x) {
if (x == "DEL") return("deletion")
else if (x == "DUP") return("duplication")
else return("")
}
# Convert CNVtype
cnvFounds$CNV.type <- lapply(cnvFounds$CNV.type, function(x) sapply(x, auxCNname))
# Convert CNVtype
cnvFounds$CNV.type <- lapply(cnvFounds$CNV.type, function(x) sapply(x, auxConvert))
View(cnvFounds)
# Write result table
cnvFounds$CNV.type <- as.character(cnvFounds$CNV.type)
write.table(cnvFounds, file.path(resultFolder, "cnvFounds.txt"), sep="\t", row.names=FALSE, quote = FALSE)
# Save results in GRanges format
message("Saving GenomicRanges results")
saveResultsFileToGR(resultFolder, "cnvFounds.txt")
# Write result table
cnvFounds$CNV.type <- as.character(cnvFounds$CNV.type)
write.table(cnvFounds, file.path(outputFolder, "cnvFounds.txt"), sep="\t", row.names=FALSE, quote = FALSE)
# Save results in GRanges format
message("Saving GenomicRanges results")
library(methods)
source(if (basename(getwd()) == "optimizers") "../utils/utils.r" else "utils/utils.r") # Load utils functions
getwd()
setwd( "/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/")
source(if (basename(getwd()) == "optimizers") "../utils/utils.r" else "utils/utils.r") # Load utils functions
saveResultsFileToGR(outputFolder, "cnvFounds.txt")
warnings()
View(cnvFounds)
bams_dir <- "/home/robin/Documents/Project/Samples/bam/manta"
bed_file <- "/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38_noSNP.bed"
fasta_file <- "/home/robin/Documents/Project/Samples/hg38/hg38.fa"
bamsDir <- "/home/robin/Documents/Project/Samples/bam/manta"
outputFolder <- "/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/manta-datasetmanta"
# List bam files
bamFiles <- list.files(bamsDir)
bamFiles <- bamFiles[!grepl(".bai", bamFiles)]
bamList <- c()
for (bam in bamFiles){
bamList <- c(bamList, paste0("--bam=", file.path(bamsDir, bam)))
}
bamList <- paste(bamList, collapse = " ")
# Decompress result VCF file
resultFolder <- file.path(outputFolder, "results", "variants")
system(paste("gzip -d", file.path(resultFolder, "diploidSV.vcf.gz")))
# Read bed Result File
resultFile <- file.path(resultFolder, "diploidSV.bedpe")
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
# Filter BND and useless columns
resultData <- subset(resultData, resultData$TYPE == "DUP" | resultData$TYPE == "DEL")
ncols <- ncol(resultData)
resultData <- resultData[, c(1, 2, 5, 11, 12, 15:ncols)]
View(resultData)
# Add 1 to start.A and start.B
resultData$START_A <- resultData$START_A + 1
resultData$START_B <- resultData$START_B + 1
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 5, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Rename colnames
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
View(cnvFounds)
# Run Manta in group of 8 samples
sets <- length(bamFiles)/8
lastset <- length(bamFiles) %% 8
# Run Manta in group of 8 samples
sets <- length(bamFiles) %/% 8
lastset <- length(bamFiles) %% 8
# Run Manta in group of 8 samples
sets <- length(bamFiles) %/% 8
lastset <- length(bamFiles) %% 8
extralastset <- 8 - lastset
if(lastset == 0){
for(i in 1:sets){
setDir <- file.path(outputFolder, paste0("set", i))
dir.create(setDir)
}
} else {
for(i in 1:(sets + 1)){
setDir <- file.path(outputFolder, paste0("set", i))
dir.create(setDir)
}
bamList <- c()
for (bam in bamFiles){
bamList <- c(bamList, paste0("--bam=", file.path(bamsDir, bam)))
}
bamList <- paste(bamList, collapse = " ")
# Execute Manta
processMantaBody(launchFile, bamList, fastaFile, subsetFolder, bedFile,configFile, params)
# Decompress result VCF file
resultFolder <- file.path(outputFolder, "results", "variants")
system(paste("gzip -d", file.path(resultFolder, "diploidSV.vcf.gz")))
# Transform VCF to bed
system(paste("python", file.path(svTools, "vcfToBedpe"), "-i",file.path(resultFolder, "diploidSV.vcf"), ">", file.path(resultFolder, "diploidSV.bedpe")))
# Read bed Result File
resultFile <- file.path(resultFolder, "diploidSV.bedpe")
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
# Filter BND and useless columns
resultData <- subset(resultData, resultData$TYPE == "DUP" | resultData$TYPE == "DEL")
ncols <- ncol(resultData)
resultData <- resultData[, c(1, 2, 5, 11, 12, 15:ncols)]
# Add 1 to start.A and start.B
resultData$START_A <- resultData$START_A + 1
resultData$START_B <- resultData$START_B + 1
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
#cnvfound file
cnvFounds <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(cnvFounds) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
# Add CNV to cnvFounds per sample
for (sample in sampleNames){
sampleData <- resultData[, c(1:5)]
sampleData <- cbind(sampleData, resultData[, sample])
colnames(sampleData)[6] <- sample
# Select positive cases
positivePattern <- c("0/1", "1/1")
positiveCases <- grep(paste(positivePattern, collapse = "|"), sampleData[, 6])
sampleData <- sampleData[positiveCases, ]
# Add lines to CNVfound
sampleID <- rep(sample, nrow(sampleData))
cnvSample <- cbind(sampleID, sampleData)
# Rename colnames
colnames(cnvSample) <- c("Sample", "Chr", "Start", "End", "CNV.type", "Filter", "SampleFilter")
#Add CNVs to CNVfound files
cnvFounds <- rbind(cnvFounds, cnvSample)
}
# Convert CNVtype
cnvFounds$CNV.type <- lapply(cnvFounds$CNV.type, function(x) sapply(x, auxConvert))
# Write result table
cnvFounds$CNV.type <- as.character(cnvFounds$CNV.type)
write.table(cnvFounds, file.path(outputFolder, "cnvFounds.txt"), sep="\t", row.names=FALSE, quote = FALSE)
# Save results in GRanges format
message("Saving GenomicRanges results")
saveResultsFileToGR(outputFolder, "cnvFounds.txt")
print(paste("manta for", name, "dataset finished", sep=" "))
cat("\n\n\n")
}
bamFiles[1:6]
bamFiles[7:12]
subsetFolder <- "/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/manta-datasetmanta/set1"
# Decompress result VCF file
resultFolder <- file.path(subsetFolder, "results", "variants")
# Read bed Result File
resultFile <- file.path(resultFolder, "diploidSV.bedpe")
resultData <- read.table(resultFile, sep="\t", stringsAsFactors=FALSE, comment.char = "", header = TRUE)
# Only DUP and DEL and filter useless columns
resultData <- subset(resultData, resultData$TYPE == "DUP" | resultData$TYPE == "DEL")
ncols <- ncol(resultData)
resultData <- resultData[, c(1, 2, 5, 11, 12, 15:ncols)]
# Add 1 to start.A and start.B
resultData$START_A <- resultData$START_A + 1
resultData$START_B <- resultData$START_B + 1
# Edit col names
sampleNames <- sub(".bam", "", bamFiles)
colnames(resultData) <- c("Chr", "Start", "End", "CNV.type", "Filter", sampleNames)
View(resultData)
