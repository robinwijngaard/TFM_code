for (alg in algorithms)
summaryText <- .self$updateSummaryText(summaryText, datasetName, alg)
summaryText <- paste(summaryText, "\n\nSummary file generated at", Sys.time())
write(summaryText, path)
},
# Writes csv results file for a desired dataset (gene level)
writeFalseNegativeResults = function(path, datasetName){
cat(paste("  Generating False Negatives summary file at", path, "\n"))
allFns <- data.frame(sample = character(), gene = character(), cnvType = character(), alg = character(), stringsAsFactors=FALSE)
samples <- datasets[[datasetName]]
for (algorithm in names(globalStats[[datasetName]])){
for(s in samples) {
if (s$algorithms[[algorithm]]$nFNgene > 0 ){
fns <- s$algorithms[[algorithm]]$FNdata
for (i in 1:nrow(fns)) {
allFns[nrow(allFns) + 1,] <- list(s$id, fns[i, "gene"], fns[i, "cnvType"], algorithm)
}
}
}
}
write.table(allFns, path, sep="\t", row.names=FALSE, quote = FALSE)  # write output file
},
# Writes csv results file for a desired dataset
writeCSVresults = function(path, datasetName){
cat(paste("  Generating CSV results file at", path, "\n"))
# Create folder if not exists
outputFolder <- dirname(path)
dir.create(outputFolder, showWarnings = FALSE)
# Create and fill summary output file
all <- NULL
for (alg in names(globalStats[[datasetName]])){
algResults <- globalStats[[datasetName]][[alg]]
algResults$algorithm <- alg
algResults$level <- rownames(algResults)
if (is.null(all))
all <- algResults
else
all <- rbind(all, algResults)
}
write.table(all, path, sep="\t", row.names=FALSE, quote = FALSE)  # write output file
},
# Fill global stats for desired dataset and algortithm
fillGlobalStats = function(datasetName, alg){
# create data.frame and fill with 0
df <- data.frame(matrix(ncol = 15, nrow = 4))
colnames(df) <- c("TP","TN","FP","FN","total","no_calls","no_call_rate","sensitivity","specificity","PPV","NPV","F1","MCC","kappa","accuracy")
rownames(df) <- c("roi","roi_incNoCall", "gene","whole_strategy") # stats level
for (i in 1:nrow(df))
df[i,] <- rep(0, 15)
# Calculate basic stats
samples <- datasets[[datasetName]]
for(s in samples) {
df["roi", "TP"] <- df["roi", "TP"] + s$algorithms[[alg]]$nTP
df["roi", "TN"] <- df["roi", "TN"] + s$algorithms[[alg]]$nTN
df["roi", "FP"] <- df["roi", "FP"] + s$algorithms[[alg]]$nFP
df["roi", "FN"] <- df["roi", "FN"] + s$algorithms[[alg]]$nFN
df["roi", "total"] <- df["roi", "total"] + s$algorithms[[alg]]$nROIs
df["roi", "no_calls"] <- df["roi", "no_calls"] + s$algorithms[[alg]]$nFailedROIs
df["roi_incNoCall", "TP"] <- df["roi_incNoCall", "TP"] + s$algorithms[[alg]]$nTP_incNoCall
df["roi_incNoCall", "TN"] <- df["roi_incNoCall", "TN"] + s$algorithms[[alg]]$nTN_incNoCall
df["roi_incNoCall", "FP"] <- df["roi_incNoCall", "FP"] + s$algorithms[[alg]]$nFP_incNoCall
df["roi_incNoCall", "FN"] <- df["roi_incNoCall", "FN"] + s$algorithms[[alg]]$nFN_incNoCall
df["roi_incNoCall", "total"] <- df["roi", "total"] + s$algorithms[[alg]]$nROIs
df["roi_incNoCall", "no_calls"] <- df["roi", "no_calls"] + s$algorithms[[alg]]$nFailedROIs
df["gene", "TP"] <- df["gene", "TP"] + s$algorithms[[alg]]$nTPgene
df["gene", "TN"] <- df["gene", "TN"] + s$algorithms[[alg]]$nTNgene
df["gene", "FP"] <- df["gene", "FP"] + s$algorithms[[alg]]$nFPgene
df["gene", "FN"] <- df["gene", "FN"] + s$algorithms[[alg]]$nFNgene
df["gene", "total"] <- df["gene", "total"] + s$algorithms[[alg]]$nCheckedGenes
df["gene", "no_calls"] <- df["gene", "no_calls"] + s$algorithms[[alg]]$nFailedGenes
df["whole_strategy", "TP"] <- df["whole_strategy", "TP"] + s$algorithms[[alg]]$nTPgene_incNoCall
df["whole_strategy", "TN"] <- df["whole_strategy", "TN"] + s$algorithms[[alg]]$nTNgene_incNoCall
df["whole_strategy", "FP"] <- df["whole_strategy", "FP"] + s$algorithms[[alg]]$nFPgene_incNoCall
df["whole_strategy", "FN"] <- df["whole_strategy", "FN"] + s$algorithms[[alg]]$nFNgene_incNoCall
df["whole_strategy", "total"] <- df["whole_strategy", "total"] + s$algorithms[[alg]]$nCheckedGenes
df["whole_strategy", "no_calls"] <- df["whole_strategy", "no_calls"] + s$algorithms[[alg]]$nFailedGenes
}
# Calculate other stats
for (row in rownames(df)){
df[row, "no_call_rate"] <- round(df[row, "no_calls"] / df[row, "total"] * 100, 4)
df[row, "sensitivity"] <- round(df[row, "TP"] / (df[row, "TP"] + df[row, "FN"]), 4)
df[row, "specificity"] <- round(df[row, "TN"] / (df[row, "TN"] + df[row, "FP"]), 4)
df[row, "PPV"] <- round(df[row, "TP"] / (df[row, "TP"] + df[row, "FP"]), 4)
df[row, "NPV"] <- round(df[row, "TN"] / (df[row, "TN"] + df[row, "FN"]), 4)
df[row, "F1"] <- round(2 * df[row, "TP"] / (2 * df[row, "TP"] + df[row, "FP"] + df[row, "FN"]), 4)
df[row, "MCC"] <- round((df[row, "TP"] * df[row, "TN"] - df[row, "FP"] * df[row, "FN"]) /
sqrt((df[row, "TP"] + df[row, "FP"]) * (df[row, "TP"] + df[row, "FN"]) * (df[row, "TN"] + df[row, "FP"]) * (df[row, "TN"] + df[row, "FN"])), 4)
df[row, "accuracy"] <- round((df[row, "TP"] + df[row, "TN"]) / (df[row, "TN"] + df[row, "FP"] + df[row, "FN"] + df[row, "TP"]), 4)
expectedAccuracy <- ((df[row, "TP"] + df[row, "FP"]) * (df[row, "TP"] + df[row, "FN"]) + (df[row, "TN"] + df[row, "FP"]) * (df[row, "TN"] + df[row, "FN"])) / ((df[row, "TN"] + df[row, "FP"] + df[row, "TP"] + df[row, "FN"])^2)
df[row, "kappa"] <-   round((df[row, "accuracy"] - expectedAccuracy)/(1 - expectedAccuracy), 4)
}
# save stats
globalStats[[datasetName]][[alg]] <<- df
},
getSamplesNames = function(datasetName){
samples <- datasets[[datasetName]]
result <- c()
for(s in samples) {
result <- append(result, s$id)
}
return(result)
},
# Prints false negatives for all samples of last checked results
printFalseNegatives_geneLevel = function(datasetName, algorithm, printable = TRUE){
samples <- datasets[[datasetName]]
text <- "\n\n\tFalse Negatives per gene:"
for(s in samples) {
if (s$algorithms[[algorithm]]$nFNgene > 0 ){
text <- paste(text, "\n\t\tSample", s$id, s$algorithms[[algorithm]]$nFNgene, "false negative(s)")
}
}
if (printable)
cat(text)
else
return(text)
},
# Prints true negatives for all samples of last checked results
printTrueNegatives_geneLevel = function(datasetName, algorithm, printable = TRUE){
samples <- datasets[[datasetName]]
text <- "\n\n\tTrue Negatives per gene:"
for(s in samples) {
if (s$algorithms[[algorithm]]$nTNgene > 0 )
text <- paste(text, "\n\t\tSample", s$id, s$algorithms[[algorithm]]$nTNgene, "true negative(s)")
}
if (printable)
cat(text)
else
return(text)
},
# Prints false positives for all samples of last checked results
printFalsePositives_geneLevel = function(datasetName, algorithm, printable = TRUE){
samples <- datasets[[datasetName]]
text <- "\n\n\tFalse Positives per gene:"
for(s in samples) {
if (s$algorithms[[algorithm]]$nFPgene > 0 )
text <- paste(text, "\n\t\tSample", s$id, s$algorithms[[algorithm]]$nFPgene, "false positives(s)")
}
if (printable)
cat(text)
else
return(text)
},
# Prints false negatives for all samples (at gene level and including no-calls)
printWholeStrategyFalseNegatives = function(datasetName, algorithm, printable = TRUE){
samples <- datasets[[datasetName]]
text <- "\n\n\tFalse Negatives at whole strategy level:"
for(s in samples) {
if (s$algorithms[[algorithm]]$nFNgene_incNoCall > 0 )
text <- paste(text, "\n\t\tSample", s$id, s$algorithms[[algorithm]]$nFNgene_incNoCall, "false negative(s)")
}
if (printable)
cat(text)
else
return(text)
},
# Prints false positives for all samples (at gene level and including no-calls)
printWholeStrategyFalsePositives = function(datasetName, algorithm, printable = TRUE){
samples <- datasets[[datasetName]]
text <- "\n\n\tFalse Positives at whole strategy level:"
for(s in samples) {
if (s$algorithms[[algorithm]]$nFPgene_incNoCall > 0 )
text <- paste(text, "\n\t\tSample", s$id, s$algorithms[[algorithm]]$nFPgene_incNoCall, "false positives(s)")
}
if (printable)
cat(text)
else
return(text)
},
updateSummaryText = function(summaryText, datasetName, alg){
if (!identical(summaryText, character(0)))
summaryText <- paste0(summaryText, "\n\n")
stats <- globalStats[[datasetName]][[alg]]
cText <- paste(alg,"results on dataset", datasetName,
"\n\tStats per ROI:",
"\n\t\tSensitivity:", stats["roi", "sensitivity"],
"\n\t\tSpecificity:", stats["roi", "specificity"],
"\n\t\tNo-call rate:", stats["roi", "no_call_rate"], "%  from a total of", stats["roi", "total"], "ROIs",
"\n\tStats per gene:",
"\n\t\tSensitivity:", stats["gene", "sensitivity"],
"\n\t\tSpecificity:", stats["gene", "specificity"],
"\n\t\tNo-call rate:", stats["gene", "no_call_rate"], "%  from a total of", stats["gene", "total"], "genes",
"\n\t\tF1 Score:", stats["gene", "F1"],
"\n\t\tPositive Predictive Value:", stats["gene", "PPV"],
"\n\t\tNegative Predictive Value:", stats["gene", "NPV"],
"\n\t\tMatthews correlation coefficient:", stats["gene", "MCC"],
"\n\t\tCohen's kappa:", stats["gene", "kappa"],
"\n\tStats at whole strategy level (per gene and including no-calls):",
"\n\t\tSensitivity:", stats["whole_strategy", "sensitivity"],
"\n\t\tSpecificity:", stats["whole_strategy", "specificity"],
" -> ", stats["whole_strategy", "FP"], "extra gene(s) have to be covered by MLPA,", stats["whole_strategy", "TN"], "genes saved")
cText <- paste(cText, printFalseNegatives_geneLevel(datasetName, alg, FALSE))
cText <- paste(cText, printFalsePositives_geneLevel(datasetName, alg, FALSE))
cText <- paste(cText, printWholeStrategyFalseNegatives(datasetName, alg, FALSE))
cText <- paste(cText, printWholeStrategyFalsePositives(datasetName, alg, FALSE))
summaryText <- paste0(summaryText, cText)
return(summaryText)
},
# Returns desired stat metric. Ex: getStat("icr96", "decon", "sensitivity", "roi")
getStat = function(datasetName, alg, metric, level){
return(globalStats[[datasetName]][[alg]][level, metric])
}
))
samples <- list()
# load bed file regions
bedData <- read.csv(bedFile, header = T, sep = "\t", stringsAsFactors=F)
bedDataGR <- GRanges(seqnames = bedData[,1], ranges = IRanges(start=bedData[,2], end=bedData[,3]))
# extract sample names
sampleIds <- unique(data["SampleID"])[[1]]
# build Sample object for each sample name
for(id in sampleIds) {
validatedGenes <- subset(data, SampleID == id)[["Gene"]]
allPositives <- data.frame()
allNegatives <- data.frame()
for (gene in (validatedGenes)){
allGenePositives <- data.frame()
allGeneNegatives <- data.frame()
for(cnvType in c("Deletion", "Duplication", "")) {
# get matching data
events <- subset(data, SampleID == id & ExonCNVType == cnvType & Gene == gene)
grEvents <- GRanges(seqnames = events[["Chromosome"]], ranges = IRanges(start=events[["X5PrimeExon38"]], end=events[["X3PrimeExon38"]]))
overlaps <- countOverlaps(bedDataGR, grEvents, type = "any")
aux <- bedData[overlaps != 0,]
if (nrow(aux) > 0) {
aux$cnvType <- cnvType
} else
aux$cnvType <- character(0)
# store it
if (cnvType %in% c("Deletion", "Duplication")) {
allGenePositives <- rbind(allGenePositives, aux)
} else
allGeneNegatives <- rbind(allGeneNegatives, aux)
}
# if postive was found, other ROIs belonging to the gene without CNV have to be included as negative
if (nrow(allGenePositives) > 0) {
posFoundsGR <- GRanges(seqnames = allGenePositives[[1]], ranges = IRanges(start=allGenePositives[[2]], end=allGenePositives[[3]]))
overlaps <- countOverlaps(bedDataGR, posFoundsGR, type = "any")
aux <- bedData[overlaps == 0 & bedData[,4] == gene,]
if (nrow(aux) > 0){
aux$cnvType <- ""
allGeneNegatives <- rbind(allGeneNegatives, aux)
}
}
allPositives <- rbind(allPositives, allGenePositives)
allNegatives <- rbind(allNegatives, allGeneNegatives)
}
colnames(allPositives) <- c("chr", "start", "end", "gene", "cnvType")
colnames(allNegatives) <- colnames(allPositives)
allPositives$cnvType <- gsub("Deletion", "deletion", allPositives$cnvType)
allPositives$cnvType <- gsub("Duplication", "duplication", allPositives$cnvType)
allNegatives$cnvType <- gsub("", "none", allNegatives$cnvType)
all <- rbind(allPositives, allNegatives)
# sort by chr and start
all <- all[with(all, order(chr, start)), ]
# Build and store Sample object
s <- SampleStats()
s$new(id = as.character((id)),
validatedROIs = all,
validatedGenes = validatedGenes)
samples[[as.character((id))]] <- s
}
return(samples)
View(samples)
data <- read.csv(path, sep="\t", header=TRUE, stringsAsFactors = FALSE)
globalStats[[datasetName]] <<- list()
# Run summary for all datasets and algorithms
for (dName in names(datasets)) {
dataset <- datasets[[dName]]
if (dataset$include){
# Create SummaryStats object and load current dataset validated results
ss <- SummaryStats()
ss$loadValidatedResults(dataset$validated_results_file, dName, dataset$bed_file)
# Calculate metrics
for (alg in names(algorithms)) {
useAlg <- algorithms[[alg]]
if (useAlg){
outputFolder <- file.path(getwd(), "output", paste0(alg, "-", dName))
ss$loadAlgorithmResults(outputFolder, alg, dName, dataset$bed_file)
}
}
# Write results to summary file
ss$writeSummary(file.path(getwd(), "output", "summary", paste0("summary-", dName, ".txt")), dName)
ss$writeCSVresults(file.path(getwd(), "output", "summary", paste0("results-", dName, ".csv")), dName)
}
}
# add dataset
datasets[[datasetName]] <<- getSamplesWithResults(data, bedFile)
samples <- list()
# load bed file regions
bedData <- read.csv(bedFile, header = T, sep = "\t", stringsAsFactors=F)
bedDataGR <- GRanges(seqnames = bedData[,1], ranges = IRanges(start=bedData[,2], end=bedData[,3]))
# extract sample names
sampleIds <- unique(data["SampleID"])[[1]]
View(data)
View(data)
# build Sample object for each sample name
for(id in sampleIds) {
validatedGenes <- subset(data, SampleID == id)[["Gene"]]
allPositives <- data.frame()
allNegatives <- data.frame()
for (gene in (validatedGenes)){
allGenePositives <- data.frame()
allGeneNegatives <- data.frame()
for(cnvType in c("Deletion", "Duplication", "")) {
# get matching data
events <- subset(data, SampleID == id & ExonCNVType == cnvType & Gene == gene)
grEvents <- GRanges(seqnames = events[["Chromosome"]], ranges = IRanges(start=events[["X5PrimeExon38"]], end=events[["X3PrimeExon38"]]))
overlaps <- countOverlaps(bedDataGR, grEvents, type = "any")
aux <- bedData[overlaps != 0,]
if (nrow(aux) > 0) {
aux$cnvType <- cnvType
} else
aux$cnvType <- character(0)
# store it
if (cnvType %in% c("Deletion", "Duplication")) {
allGenePositives <- rbind(allGenePositives, aux)
} else
allGeneNegatives <- rbind(allGeneNegatives, aux)
}
# if postive was found, other ROIs belonging to the gene without CNV have to be included as negative
if (nrow(allGenePositives) > 0) {
posFoundsGR <- GRanges(seqnames = allGenePositives[[1]], ranges = IRanges(start=allGenePositives[[2]], end=allGenePositives[[3]]))
overlaps <- countOverlaps(bedDataGR, posFoundsGR, type = "any")
aux <- bedData[overlaps == 0 & bedData[,4] == gene,]
if (nrow(aux) > 0){
aux$cnvType <- ""
allGeneNegatives <- rbind(allGeneNegatives, aux)
}
}
allPositives <- rbind(allPositives, allGenePositives)
allNegatives <- rbind(allNegatives, allGeneNegatives)
}
colnames(allPositives) <- c("chr", "start", "end", "gene", "cnvType")
colnames(allNegatives) <- colnames(allPositives)
allPositives$cnvType <- gsub("Deletion", "deletion", allPositives$cnvType)
allPositives$cnvType <- gsub("Duplication", "duplication", allPositives$cnvType)
allNegatives$cnvType <- gsub("", "none", allNegatives$cnvType)
all <- rbind(allPositives, allNegatives)
# sort by chr and start
all <- all[with(all, order(chr, start)), ]
# Build and store Sample object
s <- SampleStats()
s$new(id = as.character((id)),
validatedROIs = all,
validatedGenes = validatedGenes)
samples[[as.character((id))]] <- s
}
View(allPositives)
View(allNegatives)
View(allPositives)
View(allNegatives)
View(allPositives)
View(all)
s
View(samples)
algorithmName <- alg
# Load ROIs and filter them (only samples validated by MLPA)
if(file.exists(file.path(outputFolder, "failedROIs.csv"))){
failedROIsData <- read.csv(file.path(outputFolder, "failedROIs.csv"), header = T, sep = "\t", stringsAsFactors=F)
# failedROIsData[,1] <- unlist(lapply(failedROIsData[,1], getSampleName)) # process sample names
failedROIsData <- failedROIsData[failedROIsData$SampleID %in%  getSamplesNames(datasetName),]
} else {
failedROIsData <- data.frame(matrix(ncol = 5, nrow = 0))
names(failedROIsData) <- c("SampleID", "Chr", "Start", "End", "Gene")
}
getSamplesNames = function(datasetName){
samples <- datasets[[datasetName]]
result <- c()
for(s in samples) {
result <- append(result, s$id)
}
return(result)
}
# Load ROIs and filter them (only samples validated by MLPA)
if(file.exists(file.path(outputFolder, "failedROIs.csv"))){
failedROIsData <- read.csv(file.path(outputFolder, "failedROIs.csv"), header = T, sep = "\t", stringsAsFactors=F)
# failedROIsData[,1] <- unlist(lapply(failedROIsData[,1], getSampleName)) # process sample names
failedROIsData <- failedROIsData[failedROIsData$SampleID %in%  getSamplesNames(datasetName),]
} else {
failedROIsData <- data.frame(matrix(ncol = 5, nrow = 0))
names(failedROIsData) <- c("SampleID", "Chr", "Start", "End", "Gene")
}
View(failedROIsData)
getSamplesNames(datasetName)
# extract fields
bamsDir <- file.path(dataset$bams_dir)
bedFile <- file.path(dataset$bed_file)
bedData <- read.table(bedFile, sep="\t", stringsAsFactors=FALSE, col.names = (c("chr", "start", "end", "gene")))
fastaFile <- file.path(dataset$fasta_file)
# set readlength from algorithm params if defined
if (!is.null(params$readLength)){
readLength <- params$readLength
} else
readLength <- dataset$read_length
readLength <- dataset$read_length
# read bam counts
bamFiles <- list.files(bamsDir, "*.bam$", full.names=T)
counts <- getBamCounts(bed.file = bedFile,
bam.files = bamFiles,
read.width = readLength,
referenceFasta = fastaFile)
countsDF  <- as.data.frame(counts)
View(countsDF)
View(countsDF)
names(countsDF) <- gsub(".bam", "", names(countsDF)) # remove .bam from sample name
# Fix rare bug: sometimes X is added at the beginning of input samples
parts <- strsplit(bamFiles[1], "/")
original <- gsub(".bam", "", parts[[1]][length(parts[[1]])])
if (substr(original, 1, 1) != "X" && substr(names(countsDF)[7], 1, 1) == "X")
names(countsDF)[7:ncol(countsDF)] <- substring(names(countsDF)[7:ncol(countsDF)] , 2)
View(countsDF)
# Process each sample
all <- data.frame()
if (!is.null(dataset$clinical_indication) && dataset$clinical_indication != ""){
sample_indications <- read.table(dataset$clinical_indication, header = T, sep = "\t", stringsAsFactors=F)[,c(1,2)]
sample_indications <- sample_indications[sample_indications$Genes != "" & sample_indications$Genes != " ", ] # remove empty items
indicationsComp <- readCompatibleIndications(dataset$clinical_indication) # get compatible indications for each indication
for (indication in names(indicationsComp)) {
print(paste("\nProcessing indication:", indication))
# samples to test: samples matching this indication
testSamplesNames <- sample_indications[sample_indications$Genes == indication,][["SampleID"]]
if (length(testSamplesNames > 0)){
# Calculate available control samples: those compatible with test indication
compatibles <- indicationsComp[[indication]]
samplesToExclude <- sample_indications[!sample_indications$Genes %in% compatibles,][["SampleID"]]
controlSamplesNames <- sample_indications[!sample_indications$SampleID %in% samplesToExclude, ][["SampleID"]]
# Call other algorithm steps
results <- processExomedepthBody(testCountsDF = countsDF[testSamplesNames],
controlCountsDF = countsDF[controlSamplesNames],
countsDef = countsDF[1:6],
params = params)
all <- rbind(all, results)
}
}
} else {
message("Clinical indication not found, using all samples potentially as controls")
all <- processExomedepthBody(testCountsDF = countsDF[7:ncol(countsDF)],
controlCountsDF = countsDF[7:ncol(countsDF)],
countsDef = countsDF[1:6],
params = params)
}
# Run summary for all datasets and algorithms
for (dName in names(datasets)) {
dataset <- datasets[[dName]]
if (dataset$include){
# Create SummaryStats object and load current dataset validated results
ss <- SummaryStats()
ss$loadValidatedResults(dataset$validated_results_file, dName, dataset$bed_file)
# Calculate metrics
for (alg in names(algorithms)) {
useAlg <- algorithms[[alg]]
if (useAlg){
outputFolder <- file.path(getwd(), "output", paste0(alg, "-", dName))
ss$loadAlgorithmResults(outputFolder, alg, dName, dataset$bed_file)
}
}
# Write results to summary file
ss$writeSummary(file.path(getwd(), "output", "summary", paste0("summary-", dName, ".txt")), dName)
ss$writeCSVresults(file.path(getwd(), "output", "summary", paste0("results-", dName, ".csv")), dName)
}
}
setwd("/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master")
algorithmsParamsFile<-"/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/algorithms.yaml"
datasetsParamsFile<-"/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/datasets.yaml"
#Load the parameters file
algorithms <- yaml.load_file(algorithmsParamsFile)$algorithms
datasets <- yaml.load_file(datasetsParamsFile)
View(datasets)
View(algorithms)
# Run summary for all datasets and algorithms
for (dName in names(datasets)) {
dataset <- datasets[[dName]]
if (dataset$include){
# Create SummaryStats object and load current dataset validated results
ss <- SummaryStats()
ss$loadValidatedResults(dataset$validated_results_file, dName, dataset$bed_file)
# Calculate metrics
for (alg in names(algorithms)) {
useAlg <- algorithms[[alg]]
if (useAlg){
outputFolder <- file.path(getwd(), "output", paste0(alg, "-", dName))
ss$loadAlgorithmResults(outputFolder, alg, dName, dataset$bed_file)
}
}
# Write results to summary file
ss$writeSummary(file.path(getwd(), "output", "summary", paste0("summary-", dName, ".txt")), dName)
ss$writeCSVresults(file.path(getwd(), "output", "summary", paste0("results-", dName, ".csv")), dName)
}
}
# Generates summary file
#USAGE: Rscript summary.r [algortihms_params_file] [datasets_params_file]
source(if (basename(getwd()) == "utils") "cnvStats.r" else "utils/cnvStats.r") # Load class definitions
suppressPackageStartupMessages(library(yaml))
# Run summary for all datasets and algorithms
for (dName in names(datasets)) {
dataset <- datasets[[dName]]
if (dataset$include){
# Create SummaryStats object and load current dataset validated results
ss <- SummaryStats()
ss$loadValidatedResults(dataset$validated_results_file, dName, dataset$bed_file)
# Calculate metrics
for (alg in names(algorithms)) {
useAlg <- algorithms[[alg]]
if (useAlg){
outputFolder <- file.path(getwd(), "output", paste0(alg, "-", dName))
ss$loadAlgorithmResults(outputFolder, alg, dName, dataset$bed_file)
}
}
# Write results to summary file
ss$writeSummary(file.path(getwd(), "output", "summary", paste0("summary-", dName, ".txt")), dName)
ss$writeCSVresults(file.path(getwd(), "output", "summary", paste0("results-", dName, ".csv")), dName)
}
}
