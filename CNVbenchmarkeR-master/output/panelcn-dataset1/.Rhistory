setwd("~/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/decon-dataset1")
grPositives <- readRDS("grPositives.rds")
getwd()
list.files(bamsDir)
list.files("/home/robin/Documents/Project/Samples/example/bam_ex")
comda_list
conda_list
install.packages("reticulate")
install.packages("tidyverse")
library(reticulate)
conda_list()
use_condaenv(mantaenv)
use_condaenv("mantaenv")
import platform
paste("bash 'source activate mantaenv' &&", paste("python", launchFile, bamList, "--referenceFasta", fastaFile, "--runDir", outputFolder, "--exome", "--callRegions", bedFile, "--config", configFile))
paste("bash 'source activate mantaenv' &&", paste("python")
)
paste("bash -e 'source activate mantaenv;", paste("python", outputFolder, "runWorkflow.py")
)
paste("--bam", 1700)
paste("--bam", 1700) -> b
paste("--bam", 1701) -> c
paste(b, c)
b <- c(b, c)
b
paste(b)
paste(b, collapse=" ")
getwd()
list.files(getwd())
file.path(~, list.files(getwd()))
file.path(""~", list.files(getwd()))
)
dzlf
""
"
file.path("~", list.files(getwd()))
grep(list.files(getwd()), ".txt")
grepl(list.files(getwd()), ".txt")
list.files(getwd(), pattern = ".txt")
setwd("~/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/cnvkit-dataset1")
outputFolder <- getwd()
coverageFiles <- list.files(outputFolder, pattern = ".targetcoverage.cnn")
sampleName <- coverageFile[!grepl(".targetcoverage.cnn", coverageFile)]
sampleName <- coverageFiles[1][!grepl(".targetcoverage.cnn", coverageFile)]
coverageFile <- coverageFiles[1]
sampleName <- coverageFile[!grepl(".targetcoverage.cnn", coverageFile)]
sampleName <- coverageFile[!grepl("*.bam.targetcoverage.cnn", coverageFile)]
sampleName <- coverageFile[!grepl(".bam.targetcoverage.cnn", coverageFile)]
sampleName <- sub(".bam.targetcoverage.cnn", "", coverageFile)
setwd("~/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/panelcnmops-dataset1")
setwd("~/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/panelcn-dataset1")
grPositives2 <- readRDS("grPositives.rds")
mtFile <- file.path(outputFolder, "MT")
# create antitarget (empty doc)
system(paste("touch", file.path(outputFolder, "MT")))
# analyse bam samples
bamFiles <- list.files(bamsDir)
bamsDir <- /home/robin/Documents/Project/Samples/example/bam_ex
bamsDir <- "/home/robin/Documents/Project/Samples/example/bam_ex"
# analyse bam samples
bamFiles <- list.files(bamsDir)
bamFiles <- bamFiles[!grepl(".bai", bamFiles)]
for(bam in bamFiles){
system(paste("python", launchFile, "coverage", file.path(bamsDir, bam), bedFile, "-o", file.path(outputFolder, paste0(bam, ".targetcoverage.cnn"))))
}
launchFile <- "/home/robin/Documents/Project/TFM_code/cnvkit-master/cnvkit.py"
for(bam in bamFiles){
system(paste("python", launchFile, "coverage", file.path(bamsDir, bam), bedFile, "-o", file.path(outputFolder, paste0(bam, ".targetcoverage.cnn"))))
}
bedFile <- "/home/robin/Documents/Project/Samples/bedfiles/ICR96_hg38_noSNP.bed"
for(bam in bamFiles){
system(paste("python", launchFile, "coverage", file.path(bamsDir, bam), bedFile, "-o", file.path(outputFolder, paste0(bam, ".targetcoverage.cnn"))))
}
# Export results
calls <- list.files(outputFolder, pattern = ".call.cnr")
callsPath <- file.path(outputFolder, calls)
# Obtain sample names
for (call in callsPath){
sample <- sub(".call,cnr", "", call)
assign(paste0("Table", sample), read.table(refFile, sep="\t", stringsAsFactors=FALSE))
}
# Obtain sample names
for (call in callsPath){
sample <- sub(".call,cnr", "", call)
assign(paste0("Table", sample), read.table(call, sep="\t", stringsAsFactors=FALSE))
}
# Export results
calls <- list.files(outputFolder, pattern = ".call.cnr")
# Obtain sample names
for (call in calls){
sample <- sub(".call.cnr", "", call)
callPath <- file.path(outputFolder, call)
assign(paste0("Table", sample), read.table(callPath, sep="\t", stringsAsFactors=FALSE))
}
View(Table17296)
# Obtain sample names
for (call in calls){
sample <- sub(".call.cnr", "", call)
callPath <- file.path(outputFolder, call)
assign(paste0("Table", sample), read.table(callPath, sep="\t", stringsAsFactors=FALSE, col.names = TRUE))
}
View(Table17300)
# Obtain sample names
for (call in calls){
sample <- sub(".call.cnr", "", call)
callPath <- file.path(outputFolder, call)
assign(paste0("Table", sample), read.table(callPath, sep="\t", stringsAsFactors=FALSE, header = TRUE))
}
View(Table17296)
bedData <- read.table(bedFile, sep = "\t", stringsAsFactors=FALSE)
View(bedData)
failedcall <- callData[, 1:4]
sample <- sub(".call.cnr", "", call)
callPath <- file.path(outputFolder, call)
callData <-  read.table(callPath, sep="\t", stringsAsFactors=FALSE, header = TRUE)
failedcall <- callData[, 1:4]
View(failedcall)
col.names(failedcall) <- c("Chr", "Start", "End", "Gene")
colnames(failedcall) <- c("Chr", "Start", "End", "Gene")
View(failedcall)
colnames(bedData) <- c("Chr", "Start", "End", "Gene")
failedcall <- cbind(failedcall, bedData)
failedcall <- rbind(failedcall, bedData)
duplicated(failedcall)
View(failedcall)
unique(failedcall)
failedcall <- unique(failedcall)
failedcall <- callData[, 1:4]
failedcall <- cbind(failedcall, bedData)
failedcall <- rbind(failedcall, bedData)
colnames(failedcall) <- c("Chr", "Start", "End", "Gene")
failedcall <- rbind(failedcall, bedData)
failedcall[!duplicated(failedcall[, c("Chr", "Start", "End", "Gene")])]
failedcall[!duplicated(failedcall[, c("Chr", "Start", "End", "Gene")]), ]
library(dplyr)
callData <-  read.table(callPath, sep="\t", stringsAsFactors=FALSE, header = TRUE)
failedcall <- callData[, 1:4]
colnames(failedcall) <- c("Chr", "Start", "End", "Gene")
anti_join(failedcall, bedData, by=c("Chr", "Start", "End", "Gene"))
anti_join(bedData, failedcall, by=c("Chr", "Start", "End", "Gene"))
failedcall <- anti_join(bedData, failedcall, by=c("Chr", "Start", "End", "Gene"))
sampleRep <- rep(sample, nrow(failedcall))
failecall <- cbind(sampleRep, failedcall)
View(failecall)
sampleID <- rep(sample, nrow(failedcall))
failedcall <- cbind(sampleRep, failedcall)
View(failedcall)
View(failecall)
View(failedcall)
failedcall <- cbind(SampleID, failedcall)
SampleID <- rep(sample, nrow(failedcall))
failedcall <- cbind(SampleID, failedcall)
View(failedcall)
failedROIs <- rbind(failedROIs, failedcall)
failedROIs <- data.frame(matrix(ncol = 5, nrow = 0))
# Obtain failedcalls....
for (call in calls){
sample <- sub(".call.cnr", "", call)
callPath <- file.path(outputFolder, call)
callData <-  read.table(callPath, sep="\t", stringsAsFactors=FALSE, header = TRUE)
failedcall <- callData[, 1:4]
colnames(failedcall) <- c("Chr", "Start", "End", "Gene")
failedcall <- anti_join(bedData, failedcall, by=c("Chr", "Start", "End", "Gene"))
SampleID <- rep(sample, nrow(failedcall))
failedcall <- cbind(SampleID, failedcall)
failedROIs <- rbind(failedROIs, failedcall)
}
View(failedROIs)
#Write failedROIs
write.table(failedROIs, file.path(outputFolder, "failedROIs.csv"), sep="\t", row.names=FALSE, quote = FALSE)
cnvCall <- subset(callData, callData$cn != 2)
View(cnvCall)
cnvCall$CNV.type <- lapply(filteredResults$CN, function(x) sapply(x, auxCNname))
auxCNname <- function(x) {
if (x %in% c(0, 1)) return("deletion")
else if (x %in% c(3, 4)) return("duplication")
}
cnvCall$CNV.type <- lapply(cnvCall$CN, function(x) sapply(x, auxCNname))
View(cnvCall)
cnvCall$CNV.type <- lapply(cnvCall$cn, function(x) sapply(x, auxCNname))
cnvFounds <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(cnvFounds) <- c("Sample","Gene", "Chr", "Start", "End", "log2", "CN", "CNV.type")
#Add sampleID column
Sample <- rep(sample, nrow(cnvCall))
cnvCall <- cbind(Sample, cnvCall)
#Reorder and delete non-necessary colums
cnvCall <- cnvCall[, c(1, 5, 2, 3, 4, 6, 10)]
View(cnvCall)
# delete normal (cn = 2)
cnvCall <- subset(callData, callData$cn != 2)
cnvCall$CNV.type <- lapply(cnvCall$cn, function(x) sapply(x, auxCNname))
#Add sampleID column
Sample <- rep(sample, nrow(cnvCall))
cnvCall <- cbind(Sample, cnvCall)
View(cnvCall)
#Reorder and delete non-necessary colums
cnvCall <- cnvCall[, c(1, 5, 2, 3, 4, 6, 7, 10)]
colnames(cnvCall) <- c("Sample","Gene", "Chr", "Start", "End", "log2", "CN", "CNV.type")
# Obtain failedcalls and cnv
for (call in calls){
sample <- sub(".call.cnr", "", call)
callPath <- file.path(outputFolder, call)
callData <-  read.table(callPath, sep="\t", stringsAsFactors=FALSE, header = TRUE)
failedcall <- callData[, 1:4]
colnames(failedcall) <- c("Chr", "Start", "End", "Gene")
failedcall <- anti_join(bedData, failedcall, by=c("Chr", "Start", "End", "Gene"))
# Add sample ID column
SampleID <- rep(sample, nrow(failedcall))
failedcall <- cbind(SampleID, failedcall)
# Add to main file
failedROIs <- rbind(failedROIs, failedcall)
# delete normal (cn = 2)
cnvCall <- subset(callData, callData$cn != 2)
cnvCall$CNV.type <- lapply(cnvCall$cn, function(x) sapply(x, auxCNname))
#Add sampleID column
Sample <- rep(sample, nrow(cnvCall))
cnvCall <- cbind(Sample, cnvCall)
#Reorder and delete non-necessary colums
cnvCall <- cnvCall[, c(1, 5, 2, 3, 4, 6, 7, 10)]
colnames(cnvCall) <- c("Sample","Gene", "Chr", "Start", "End", "log2", "CN", "CNV.type")
cnvFounds <- rbind(cnvFounds, cnvCall)
}
#Write failedROIs
write.table(failedROIs, file.path(outputFolder, "failedROIs.csv"), sep="\t", row.names=FALSE, quote = FALSE)
write.table(cnvFounds, file.path(outputFolder, "cnvFounds.txt"), sep="\t", row.names=FALSE, quote = FALSE)
View(cnvFounds)
View(cnvFounds)
write.table(cnvFounds, file.path(outputFolder, "cnvFounds.txt"), sep="\t", row.names=FALSE, quote = FALSE)
View(cnvFounds)
class(cnvFounds)
class(cnvFounds$CNV.type)
cnvFounds$CNV.type <- as.factor(cnvFounds$CNV.type)
cnvFounds$CNV.type <- as.character(cnvFounds$CNV.type)
write.table(cnvFounds, file.path(outputFolder, "cnvFounds.txt"), sep="\t", row.names=FALSE, quote = FALSE)
saveResultsFileToGR(outputFolder, "cnvFounds.txt")
source(if (basename(getwd()) == "optimizers") "../utils/utils.r" else "utils/utils.r") # Load utils functions
outputFolder <- /home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/manta-dataset1
outputFolder <- "/home/robin/Documents/Project/TFM_code/CNVbenchmarkeR-master/output/manta-dataset1"
system("gzip -d", file.path(outputFolder, results, variants, diploidSV.vcf.gz))
system("gzip -d", file.path(outputFolder, "results", "variants", "diploidSV.vcf.gz"))
system(paste("gzip -d", file.path(outputFolder, "results", "variants", "diploidSV.vcf.gz")))
# read two times the vcf file, first for the columns names, second for the data
tmp_vcf <- readLines(file.path(outputFolder, "results", "variants", "diploidSV.vcf.gz"))
# read two times the vcf file, first for the columns names, second for the data
tmp_vcf <- readLines(file.path(outputFolder, "results", "variants", "diploidSV.vcf"))
tmp_vcf_data <- read.table(file.path(outputFolder, "results", "variants", "diploidSV.vcf"), stringsAsFactors = FALSE)
# filter for the columns names
tmp_vcf <- tmp_vcf[-(grep("#CHROM", tmp_vcf) + 1):-(length(tmp_vcf))]
vcf_names <- unlist(strsplit(tmp_vcf[length(tmp_vcf)], "\t"))
names(tmp_vcf_data) <- vcf_names
View(tmp_vcf_data)
# read two times the vcf file, first for the columns names, second for the data
vcfFile <- readLines(file.path(outputFolder, "results", "variants", "diploidSV.vcf"))
vcfData <- read.table(file.path(outputFolder, "results", "variants", "diploidSV.vcf"), stringsAsFactors = FALSE)
# filter for the columns names
vcfFile <- vcfFile[-(grep("#CHROM", vcfFile) + 1):-(length(vcfFile))]
vcf_names <- unlist(strsplit(vcfFile[length(vcfFile)], "\t"))
names(vcfData) <- vcf_names
# create CNV.Type
vcfData$CNV.Type <- ifelse(grepl("DEL", vcfData$ID), "deletion")
# create CNV.Type
vcfData$CNV.Type <- if(grepl("DEL", vcfData$ID){ "deletion"}
}
}
print(paste("Finishing at", endTime <- Sys.time()))
cat("\nElapsed time:")
print(endTime - startTime)
vcfData$CNV.Type <- if(grepl("DEL", vcfData$ID){ "deletion"}
}
}
print(paste("Finishing at", endTime <- Sys.time()))
cat("\nElapsed time:")
print(endTime - startTime)
vcfData$CNV.Type <- if(grepl("DEL", vcfData$ID)){ "deletion"}
grepl("DEL", vcfData$ID)
vcfData$CNV.Type <- ifelse(grepl("DEL", vcfData$ID),"deletion", ifelse(grepl("DUP", vcfData$ID), "duplication", NA))
View(vcfData)
vcfData <- complete.cases(vcfData)
# read two times the vcf file, first for the columns names, second for the data
vcfFile <- readLines(file.path(outputFolder, "results", "variants", "diploidSV.vcf"))
vcfData <- read.table(file.path(outputFolder, "results", "variants", "diploidSV.vcf"), stringsAsFactors = FALSE)
# filter for the columns names
vcfFile <- vcfFile[-(grep("#CHROM", vcfFile) + 1):-(length(vcfFile))]
vcf_names <- unlist(strsplit(vcfFile[length(vcfFile)], "\t"))
names(vcfData) <- vcf_names
sampleNames <- sub(".bam", "", bamFiles)
vcfData$CNV.Type <- ifelse(grepl("DEL", vcfData$ID),"deletion", ifelse(grepl("DUP", vcfData$ID), "duplication", NA))
vcfData <- complete.cases(vcfData)
vcfData <- vcfData[complete.cases(vcfData), ]
# read two times the vcf file, first for the columns names, second for the data
vcfFile <- readLines(file.path(outputFolder, "results", "variants", "diploidSV.vcf"))
vcfData <- read.table(file.path(outputFolder, "results", "variants", "diploidSV.vcf"), stringsAsFactors = FALSE)
# filter for the columns names
vcfFile <- vcfFile[-(grep("#CHROM", vcfFile) + 1):-(length(vcfFile))]
vcf_names <- unlist(strsplit(vcfFile[length(vcfFile)], "\t"))
names(vcfData) <- vcf_names
vcfData$CNV.Type <- ifelse(grepl("DEL", vcfData$ID),"deletion", ifelse(grepl("DUP", vcfData$ID), "duplication", NA))
vcfData <- vcfData[complete.cases(vcfData), ]
View(tmp_vcf_data)
bamDir <- "/home/robin/Documents/Project/Samples/example/bam_ex
"
# List bam files
bamFiles <- list.files(bamsDir)
bamsDir <- "/home/robin/Documents/Project/Samples/example/bam_ex
"
# List bam files
bamFiles <- list.files(bamsDir)
bamFiles <- bamFiles[!grepl(".bai", bamFiles)]
bamList <- c()
for (bam in bamFiles){
bamList <- c(bamList, paste0("--bam=", file.path(bamsDir, bam)))
}
sampleNames <- sub(".bam", "", bamFiles)
bamsDir <- "/home/robin/Documents/Project/Samples/example/bam_ex"
# List bam files
bamFiles <- list.files(bamsDir)
bamFiles <- bamFiles[!grepl(".bai", bamFiles)]
bamList <- c()
for (bam in bamFiles){
bamList <- c(bamList, paste0("--bam=", file.path(bamsDir, bam)))
}
sampleNames <- sub(".bam", "", bamFiles)
nSamples <- length(sampleNames)
CNV.Type <- ifelse(grepl("DEL", vcfData$ID),"deletion", ifelse(grepl("DUP", vcfData$ID), "duplication", NA))
sampleCols <- vcfData[, c(10:10+nSamples-1)]
sampleCols
sampleCols <- vcfData[, c(10:(10+nSamples-1))]
View(sampleCols)
vcfData <- vcfData[, !c(10:(10+nSamples-1))]
View(vcfData)
vcfData <- read.table(file.path(outputFolder, "results", "variants", "diploidSV.vcf"), stringsAsFactors = FALSE)
# filter for the columns names
vcfFile <- vcfFile[-(grep("#CHROM", vcfFile) + 1):-(length(vcfFile))]
vcf_names <- unlist(strsplit(vcfFile[length(vcfFile)], "\t"))
names(vcfData) <- vcf_names
sampleNames <- sub(".bam", "", bamFiles)
nSamples <- length(sampleNames)
vcfData$CNV.Type <- ifelse(grepl("DEL", vcfData$ID),"deletion", ifelse(grepl("DUP", vcfData$ID), "duplication", NA))
vcfData <- vcfData[complete.cases(vcfData), ]
sampleCols <- vcfData[, c(10:(10+nSamples-1))]
vcfData <- vcfData[, -c(10:(10+nSamples-1))]
View(vcfData)
# read two times the vcf file, first for the columns names, second for the data
vcfFile <- readLines(file.path(outputFolder, "results", "variants", "diploidSV.vcf"))
vcfData <- read.table(file.path(outputFolder, "results", "variants", "diploidSV.vcf"), stringsAsFactors = FALSE)
# filter for the columns names
vcfFile <- vcfFile[-(grep("#CHROM", vcfFile) + 1):-(length(vcfFile))]
vcf_names <- unlist(strsplit(vcfFile[length(vcfFile)], "\t"))
names(vcfData) <- vcf_names
sampleNames <- sub(".bam", "", bamFiles)
nSamples <- length(sampleNames)
vcfData$CNV.Type <- ifelse(grepl("DEL", vcfData$ID),"deletion", ifelse(grepl("DUP", vcfData$ID), "duplication", NA))
vcfData <- vcfData[complete.cases(vcfData), ]
sampleCols <- vcfData[, c(10:(10+nSamples-1))]
vcfData <- vcfData[, -c(10:(10+nSamples-1))]
View(vcfData)
colnames(sampleCols) <- sampleNames
View(sampleCols)
View(sampleCols)
View(vcfData)
