venn.diagram(venn_list, filename = "venn_fn.tiff", col = "black",fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),alpha = 0.50,cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),cat.cex = 1.5,cat.fontface = "bold",margin = 0.2)
## FP
fp_venn <- rbind(allNormal[, 7:13])
fp_venn$ID <- as.character(fp_venn$ID)
fp_venn <- fp_venn[, -6]
venn_list <- list()
for(i in 2:6){
algo <- names(fp_venn)[i]
fp_venn_algo <- fp_venn[, c(1, i)]
fp_venn_algo <- subset(fp_venn_algo, fp_venn_algo[,2] != 0)
venn_list[[algo]] <- fp_venn_algo[,1]
}
venn.diagram(venn_list, filename = "venn_fp.tiff", col = "black",fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),alpha = 0.50,cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),cat.cex = 1.5,cat.fontface = "bold",margin = 0.2)
# MDS
## All
library("MASS")
all_mds <- rbind(allData[, 9:15], allNormal[, 7:13])
all_mds <- all_mds[, c(-1,-6)]
d <- dist(t(all_mds), method = "euclidean")
MDS <- isoMDS(d)
plot(MDS$points, pch = 16, col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"), cex = 1.5)
labels <- names(all_mds)
legend(13, 13, legend=labels, col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"), pch = 16)
## Positives
TP_mds <- rbind(allData[, 9:15])
TP_mds <- TP_mds[, c(-1,-6)]
d <- dist(t(TP_mds), method = "euclidean")
MDS <- isoMDS(d)
plot(MDS$points, pch = 16, col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"), cex = 1.5)
labels <- names(all_mds)
legend(1.5, 2, legend=labels, col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"), pch = 16)
##Normal
TN_mds <- rbind(allNormal[, 7:13])
TN_mds <- TN_mds[, c(-1,-6)]
d <- dist(t(TN_mds), method = "euclidean")
MDS <- isoMDS(d)
plot(MDS$points, pch = 16, col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"), cex = 1.5)
labels <- names(all_mds)
legend(13, 12, legend=labels, col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"), pch = 16)
# Corplot
library(corrplot)
corr.all <- rbind(allData[, 10:15], allNormal[, 8:13])
corr.all <- corr.all[, -5]
cor.data <- cor(corr.all)
corrplot(cor.data)
corrplot(cor.data, method = "number")
corrplot(cor.data, method = "number", cl.lim = c(0,1))
all_mds <- rbind(allData[, 9:15], allNormal[, 7:13])
all_mds <- all_mds[, c(-1,-6)]
d <- dist(t(all_mds), method = "euclidean")
all.hc <- hclust(d, method = "ward.D2")
plot(all.hc)
View(FP_all)
FP_analysis <- FP_all %>% group_by(V8, algorithmID) %>% summarize(n=n())
library(dplyr)
FP_analysis <- FP_all %>% group_by(V8, algorithmID) %>% summarize(n=n())
View(FP_analysis)
View(FN_all)
FN_analysis <- FN_all %>% group_by(V8, algorithmID) %>% summarize(n=n())
View(allData)
View(allNormal)
rois_gene <- rbind(allData[, 4], allNormal[, 4])
rois_gene <- c(allData[, 4], allNormal[, 4])
rois_gene_count <- rois_gene %>% summarise(n=n())
View(allData)
View(allNormal)
rois_gene <- data.frame(genes = c(allData[, 4], allNormal[, 4]))
rois_gene_count <- rois_gene %>% group_by(genes) %>% summarise(n=n())
View(rois_gene_count)
View(FP_analysis)
FP_analysis$roicount <- NA
for(i in 1:nrow(FP_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FP_analysis$V8[i] == rois_gene_count$genes[j]){
FP_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FN_analysis$roicount <- NA
for(i in 1:nrow(FN_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FN_analysis$V8[i] == rois_gene_count$genes[j]){
FN_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
View(FP_analysis)
FP_analysis$perc <- FP_analysis$n/FP_analysis$roicount * 100
FN_analysis$perc <- FN_analysis$n/FN_analysis$roicount * 100
View(FP_analysis)
write.table(FP_analysis, file.path(resultDir, "FP_analysis.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
write.table(FN_analysis, file.path(resultDir, "FN_analysis.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
View(FP_analysis)
View(FN_all)
rois_gene <- data.frame(genes = c(allData[, 4], allNormal[, 4]))
rois_gene_count <- rois_gene %>% group_by(genes) %>% summarise(n=n())
FP_analysis <- FP_all %>% group_by(V8, algorithmID) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V4, algorithmID) %>% summarize(n=n())
FP_analysis$roicount <- NA
for(i in 1:nrow(FP_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FP_analysis$V8[i] == rois_gene_count$genes[j]){
FP_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FN_analysis$roicount <- NA
for(i in 1:nrow(FN_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FN_analysis$V8[i] == rois_gene_count$genes[j]){
FN_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
for(i in 1:nrow(FN_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FN_analysis$V4[i] == rois_gene_count$genes[j]){
FN_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FP_analysis$perc <- FP_analysis$n/FP_analysis$roicount * 100
FN_analysis$perc <- FN_analysis$n/FN_analysis$roicount * 100
write.table(FP_analysis, file.path(resultDir, "FP_analysis.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
write.table(FN_analysis, file.path(resultDir, "FN_analysis.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
View(FP_all)
FP_analysis <- FP_all %>% group_by(V11, algorithmID) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V9, algorithmID) %>% summarize(n=n())
FP_analysis$roicount <- NA
for(i in 1:nrow(FP_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FP_analysis$V11[i] == rois_gene_count$genes[j]){
FP_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FN_analysis$roicount <- NA
for(i in 1:nrow(FN_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FN_analysis$V9[i] == rois_gene_count$genes[j]){
FN_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FP_analysis$perc <- FP_analysis$n/FP_analysis$roicount * 100
FN_analysis$perc <- FN_analysis$n/FN_analysis$roicount * 100
View(FP_analysis)
FP_analysis <- FP_all %>% group_by(V11) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V9) %>% summarize(n=n())
FP_analysis$roicount <- NA
for(i in 1:nrow(FP_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FP_analysis$V11[i] == rois_gene_count$genes[j]){
FP_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FN_analysis$roicount <- NA
for(i in 1:nrow(FN_analysis)){
for(j in 1:nrow(rois_gene_count)){
if(FN_analysis$V9[i] == rois_gene_count$genes[j]){
FN_analysis$roicount[i] <- rois_gene_count$n[j]
}
}
}
FP_analysis$perc <- FP_analysis$n/FP_analysis$roicount * 100
FN_analysis$perc <- FN_analysis$n/FN_analysis$roicount * 100
FP_analysis <- FP_all %>% group_by(V11) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V9) %>% summarize(n=n())
View(FN_analysis)
View(FN_all)
FN_analysis <- FN_all %>% group_by(V9, V1, V2, V3, V4) %>% summarize(n=n())
FP_analysis <- FP_all %>% group_by(V11, V2, V2, V3, V8) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V9, V1, V2, V3, V4) %>% summarize(n=n())
FP_analysis <- FP_all %>% group_by(V11, V2, V2, V3, V8) %>% summarize(n=n())
FP_analysis <- FP_all %>% group_by(V11, V1, V2, V3, V8) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V9, V1, V2, V3, V4) %>% summarize(n=n())
View(allData)
FP_analysis <- FP_all %>% group_by(V11, V8) %>% summarize(n=n())
FN_analysis <- FN_all %>% group_by(V9, V4) %>% summarize(n=n())
write.table(FP_analysis, file.path(resultDir, "FP_analysis_ROI.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
write.table(FN_analysis, file.path(resultDir, "FN_analysis_ROI.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = TRUE)
deconFailedFile <- file.path(analysisDir, all, "failedROIs_decon.csv")
deconFailed <- read.table(deconFailedFile, sep = ",", stringsAsFactors=FALSE)
deconFailedFile <- file.path(analysisDir, "all", "failedROIs_decon.csv")
deconFailed <- read.table(deconFailedFile, sep = ",", stringsAsFactors=FALSE)
View(deconFailed)
deconFailed <- read.table(deconFailedFile, sep = " ", stringsAsFactors=FALSE)
deconFailed <- read.table(deconFailedFile, sep = "\t", stringsAsFactors=FALSE)
deconFailed <- read.table(deconFailedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
FP_cnvkit <- subset(FP_all, FP_all$algorithmID == "cnvkit5")
deconFailed <- deconFailed[, c(2:4,1)]
samples <- sort(unique(deconFailed$SampleID))
View(allData)
View(allNormal)
View(deconFailed)
Failed_all <- data.frame(matrix(ncol = 10, nrow = 0))
for(sample in samples){
s <- which(deconFailed$SampleID == sample)
sampleData <- deconFailed[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleData, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample bed file, filter by sample
allSample <- subset(allData[, 1:5], allData$V4 == sample)
allNormalsample <- subset(allNormal[, 1:5], allNormal$V4== sample)
allcompletesample <- rbind(allSample, allNormalsample)
allBed <- file.path(tempDir, "all.bed")
write.table(allcompletesample, allBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleBed, "-b", allBed, "> failed.bed"))
if (file.size("failed.bed") != 0) {FailedSample <- read.table("failed.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedSample <- NULL}
# Edit files
if(!is.null(FailedSample)){
n <- nrow(FailedSample)
sampleID <- rep(sample, n)
FailedSample <- cbind(sampleID, TPsample)
Failed_all <- rbind(Failed_all, FailedSample)
}
}
View(allData)
for(sample in samples){
s <- which(deconFailed$SampleID == sample)
sampleData <- deconFailed[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleData, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample bed file, filter by sample
allSample <- subset(allData[, 1:5], allData$V4 == sample)
allNormalsample <- subset(allNormal[, 1:5], allNormal$V4== sample)
colnames(allSample) <- c("chr", "start", "end", "gene", "sample")
colnames(allNormalsample) <- c("chr", "start", "end", "gene", "sample")
allcompletesample <- rbind(allSample, allNormalsample)
allBed <- file.path(tempDir, "all.bed")
write.table(allcompletesample, allBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleBed, "-b", allBed, "> failed.bed"))
if (file.size("failed.bed") != 0) {FailedSample <- read.table("failed.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedSample <- NULL}
# Edit files
if(!is.null(FailedSample)){
n <- nrow(FailedSample)
sampleID <- rep(sample, n)
FailedSample <- cbind(sampleID, TPsample)
Failed_all <- rbind(Failed_all, FailedSample)
}
}
View(Failed_all)
View(FP_cnvkit)
FP_cnvkit <- FP_cnvkit[, c(3:6,1)]
write.table(Failed_all, file.path(tempDir, "failed_decon.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit, file.path(tempDir, "fp_cnvkit.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(Failed_all, file.path(tempDir, "failed_decon.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit, file.path(tempDir, "fp_cnvkit.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
system(paste("bedtools intersect -wa -wb -a", file.path(tempDir, "failed_decon.bed"), "-b", file.path(tempDir, "fp_cnvkit.bed"), "> failed_fp.bed"))
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", file.path(tempDir, "failed_decon.bed"), "-b", file.path(tempDir, "fp_cnvkit.bed"), "> failed_fp.bed"))
failed_fp <- read.table(file.path(tempDir, "failed_fp.bed"),sep = "\t", stringsAsFactors=FALSE))
failed_fp <- read.table(file.path(tempDir, "failed_fp.bed"),sep = "\t", stringsAsFactors=FALSE)
system(paste("bedtools intersect -wa -wb -a", file.path(tempDir, "failed_decon.bed"), "-b", file.path(tempDir, "fp_cnvkit.bed"), "> failed_fp.bed"))
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", file.path(tempDir, "failed_decon.bed"), "-b", file.path(tempDir, "fp_cnvkit.bed"), "> failed_fp.bed"))
deconFailedFile <- file.path(analysisDir, "all", "failedROIs_decon.csv")
deconFailed <- read.table(deconFailedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
deconFailed <- deconFailed[, c(2:4,1)]
samples <- sort(unique(deconFailed$SampleID))
Failed_all <- data.frame(matrix(ncol = 10, nrow = 0))
View(deconFailed)
View(allData)
View(allNormal)
View(allNormalsample)
View(allcompletesample)
for(sample in samples){
s <- which(deconFailed$SampleID == sample)
sampleData <- deconFailed[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleData, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample bed file, filter by sample
allSample <- subset(allData[, 1:5], allData$V4 == sample)
allNormalsample <- subset(allNormal[, 1:5], allNormal$V4== sample)
colnames(allSample) <- c("chr", "start", "end", "gene", "sample")
colnames(allNormalsample) <- c("chr", "start", "end", "gene", "sample")
allcompletesample <- rbind(allSample, allNormalsample)
allBed <- file.path(tempDir, "all.bed")
write.table(allcompletesample, allBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", sampleBed, "-b", allBed, "> failed.bed"))
if (file.size("failed.bed") != 0) {FailedSample <- read.table("failed.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedSample <- NULL}
# Edit files
if(!is.null(FailedSample)){
n <- nrow(FailedSample)
sampleID <- rep(sample, n)
FailedSample <- cbind(sampleID, FailedSample)
Failed_all <- rbind(Failed_all, FailedSample)
}
}
View(Failed_all)
FP_cnvkit <- subset(FP_all, FP_all$algorithmID == "cnvkit5")
FP_cnvkit <- FP_cnvkit[, c(3:6,1)]
write.table(Failed_all, file.path(tempDir, "failed_decon.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit, file.path(tempDir, "fp_cnvkit.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
setwd(tempDir)
system(paste("bedtools intersect -wa -wb -a", file.path(tempDir, "failed_decon.bed"), "-b", file.path(tempDir, "fp_cnvkit.bed"), "> failed_fp.bed"))
View(Failed_all)
Failed_all <- data.frame(matrix(ncol = 5, nrow = 0))
for(sample in samples){
s <- which(deconFailed$SampleID == sample)
sampleData <- deconFailed[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleData, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample bed file, filter by sample
allSample <- subset(allData[, 1:5], allData$V4 == sample)
allNormalsample <- subset(allNormal[, 1:5], allNormal$V4== sample)
colnames(allSample) <- c("chr", "start", "end", "gene", "sample")
colnames(allNormalsample) <- c("chr", "start", "end", "gene", "sample")
allcompletesample <- rbind(allSample, allNormalsample)
allBed <- file.path(tempDir, "all.bed")
write.table(allcompletesample, allBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -a", sampleBed, "-b", allBed, "> failed.bed"))
if (file.size("failed.bed") != 0) {FailedSample <- read.table("failed.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedSample <- NULL}
# Edit files
if(!is.null(FailedSample)){
Failed_all <- rbind(Failed_all, FailedSample)
}
}
View(Failed_all)
Failed_all <- data.frame(matrix(ncol = 5, nrow = 0))
for(sample in samples){
s <- which(deconFailed$SampleID == sample)
sampleData <- deconFailed[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleData, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample bed file, filter by sample
allSample <- subset(allData[, 1:5], allData$V4 == sample)
allNormalsample <- subset(allNormal[, 1:5], allNormal$V4== sample)
colnames(allSample) <- c("chr", "start", "end", "gene", "sample")
colnames(allNormalsample) <- c("chr", "start", "end", "gene", "sample")
allcompletesample <- rbind(allSample, allNormalsample)
allBed <- file.path(tempDir, "all.bed")
write.table(allcompletesample, allBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -a", sampleBed, "-b", allBed, "> failed.bed"))
if (file.size("failed.bed") != 0) {FailedSample <- read.table("failed.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedSample <- NULL}
# Edit files
if(!is.null(FailedSample)){
Failed_all <- rbind(Failed_all, FailedSample)
}
}
Failed_all <- Failed_all[, 5:9]
setwd(tempDir)
Failed_FP.df <- data.frame(matrix(ncol = 10, nrow = 0))
for(sample in samples){
s <- which(Failed_all$V9 == sample)
sampleFailed <- Failed_all[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleFailed, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample FP cnvkit
fpSample <- subset(FP_cnvkit, FP_cnvkit$sampleID == sample)
fpBed <- file.path(tempDir, "fp.bed")
write.table(fpSample, fpBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -wa -a", sampleBed, "-b", fpBed, "> failed_fp.bed"))
if (file.size("failed_fp.bed") != 0) {FailedFPSample <- read.table("failed_fp.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedFPSample <- NULL}
# Edit files
if(!is.null(FailedFPSample)){
Failed_FP.df <- rbind(Failed_FP.df, FailedFPSample)
}
}
View(Failed_FP.df)
View(allNormal)
View(allNormalsample)
View(allNormal)
View(FP_all)
deconFailedFile <- file.path(analysisDir, "all", "failedROIs_decon.csv")
deconFailed <- read.table(deconFailedFile, sep = "\t", stringsAsFactors=FALSE, header = TRUE)
deconFailed <- deconFailed[, c(2:4,1)]
samples <- sort(unique(deconFailed$SampleID))
Failed_all <- data.frame(matrix(ncol = 10, nrow = 0))
for(sample in samples){
s <- which(deconFailed$SampleID == sample)
sampleData <- deconFailed[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleData, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample bed file, filter by sample
allSample <- subset(allData[, c(1:5,9)], allData$V4 == sample)
allNormalsample <- subset(allNormal[, c(1:5, 7)], allNormal$V4== sample)
colnames(allSample) <- c("chr", "start", "end", "gene", "sample", "ID")
colnames(allNormalsample) <- c("chr", "start", "end", "gene", "sample", "ID")
allcompletesample <- rbind(allSample, allNormalsample)
allBed <- file.path(tempDir, "all.bed")
write.table(allcompletesample, allBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -a", sampleBed, "-b", allBed, "> failed.bed"))
if (file.size("failed.bed") != 0) {FailedSample <- read.table("failed.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedSample <- NULL}
# Edit files
if(!is.null(FailedSample)){
Failed_all <- rbind(Failed_all, FailedSample)
}
}
View(Failed_all)
Failed_all <- Failed_all[, 5:10]
length(Failed_all$V10 < 292)
length(Failed_all$V10[Failed_all$V10 < 292])
FP_cnvkit <- subset(FP_all, FP_all$algorithmID == "cnvkit5")
FP_cnvkit <- FP_cnvkit[, c(3:6,1, 13)]
write.table(Failed_all, file.path(tempDir, "failed_decon.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit, file.path(tempDir, "fp_cnvkit.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
setwd(tempDir)
Failed_FP.df <- data.frame(matrix(ncol = 10, nrow = 0))
Failed_FP.df <- data.frame(matrix(ncol = 12, nrow = 0))
for(sample in samples){
s <- which(Failed_all$V9 == sample)
sampleFailed <- Failed_all[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleFailed, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample FP cnvkit
fpSample <- subset(FP_cnvkit, FP_cnvkit$sampleID == sample)
fpBed <- file.path(tempDir, "fp.bed")
write.table(fpSample, fpBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -wa -a", sampleBed, "-b", fpBed, "> failed_fp.bed"))
if (file.size("failed_fp.bed") != 0) {FailedFPSample <- read.table("failed_fp.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedFPSample <- NULL}
# Edit files
if(!is.null(FailedFPSample)){
Failed_FP.df <- rbind(Failed_FP.df, FailedFPSample)
}
}
failed_fp <- read.table(file.path(tempDir, "failed_fp.bed"),sep = "\t", stringsAsFactors=FALSE)
View(Failed_all)
write.table(Failed_all, file.path(tempDir, "failed_decon.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit, file.path(tempDir, "fp_cnvkit.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
for(sample in samples){
s <- which(Failed_all$V9 == sample)
sampleFailed <- Failed_all[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleFailed, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample FP cnvkit
fpSample <- subset(FP_cnvkit, FP_cnvkit$sampleID == sample)
fpBed <- file.path(tempDir, "fp.bed")
write.table(fpSample, fpBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -wa -a", sampleBed, "-b", fpBed, "> failed_fp.bed"))
if (file.size("failed_fp.bed") != 0) {FailedFPSample <- read.table("failed_fp.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedFPSample <- NULL}
# Edit files
if(!is.null(FailedFPSample)){
Failed_FP.df <- rbind(Failed_FP.df, FailedFPSample)
}
}
for(sample in samples){
s <- which(Failed_all$V9 == sample)
sampleFailed <- Failed_all[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleFailed, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample FP cnvkit
fpSample <- subset(FP_cnvkit, FP_cnvkit$sampleID == sample)
fpBed <- file.path(tempDir, paste0("cnvkitfp_", sample, ".bed"))
write.table(fpSample, fpBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -wa -a", sampleBed, "-b", fpBed, "> failed_fp.bed"))
if (file.size("failed_fp.bed") != 0) {FailedFPSample <- read.table("failed_fp.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedFPSample <- NULL}
# Edit files
if(!is.null(FailedFPSample)){
Failed_FP.df <- rbind(Failed_FP.df, FailedFPSample)
}
}
Failed_FP.df <- data.frame(matrix(ncol = 12, nrow = 0))
for(sample in samples){
s <- which(Failed_all$V9 == sample)
sampleFailed <- Failed_all[s, ]
sampleBed <- file.path(tempDir, paste0("deconfailed_", sample, ".bed"))
write.table(sampleFailed, sampleBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# Prepare sample FP cnvkit
fpSample <- subset(FP_cnvkit, FP_cnvkit$sampleID == sample)
fpBed <- file.path(tempDir, paste0("cnvkitfp_", sample, ".bed"))
write.table(fpSample, fpBed, sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
# intersect
setwd(tempDir)
system(paste("bedtools intersect -wb -wa -a", sampleBed, "-b", fpBed, "> failed_fp.bed"))
if (file.size("failed_fp.bed") != 0) {FailedFPSample <- read.table("failed_fp.bed", sep = "\t", stringsAsFactors=FALSE)} else {FailedFPSample <- NULL}
# Edit files
if(!is.null(FailedFPSample)){
Failed_FP.df <- rbind(Failed_FP.df, FailedFPSample)
}
}
View(FN_all)
View(Failed_FP.df)
View(allNormal)
View(Failed_FP.df)
View(Failed_all)
## Venn
venn_list <- list(Failed_decon = as.character(sort(unique(Failed_all$V10))),
FP_cnvkit = as.character(sort(unique(FP_cnvkit$V11))))
venn.diagram(venn_list, filename = "venn_failed_fp.tiff", col = "black",fill = c("dodgerblue", "goldenrod1"),alpha = 0.50,cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),cat.cex = 1.5,cat.fontface = "bold",margin = 0.2)
venn.diagram(venn_list, filename = "venn_failed_fp.tiff", col = "black",fill = c("dodgerblue", "goldenrod1"),alpha = 0.50,cat.col = c("dodgerblue", "goldenrod1"),cat.cex = 1.5,cat.fontface = "bold",margin = 0.2)
Failed_all %>% group_by(V9) %>% summarize(n=n())
Failed_all %>% group_by(V9) %>% summarize(n=n())
FP_cnvkit %>% group_by(sampleID) %>% summarize(n=n())
write.table(Failed_all, file.path(resultDir, "failed_decon.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit, file.path(resultDir, "fp_cnvkit.bed"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(Failed_all %>% group_by(V9) %>% summarize(n=n()), file.path(resultDir, "Failed_samples.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
write.table(FP_cnvkit %>% group_by(sampleID) %>% summarize(n=n()), file.path(resultDir, "FP_samples.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
FP_cnvkit %>% group_by(sampleID) %>% summarize(n=n())
write.table(FP_cnvkit %>% group_by(sampleID) %>% summarize(n=n()), file.path(resultDir, "FP_samples.txt"), sep="\t", row.names=FALSE, quote = FALSE, col.names = FALSE)
source('~/Documents/Project/TFM_code/CNVbenchmarkeR-master/cnvfounds/FP_FN_analysis.r')
